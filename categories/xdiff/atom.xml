<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xdiff | php.js]]></title>
  <link href="http://kvz.github.com/phpjs//categories/xdiff/atom.xml" rel="self"/>
  <link href="http://kvz.github.com/phpjs//"/>
  <updated>2012-05-17T23:03:58+02:00</updated>
  <id>http://kvz.github.com/phpjs//</id>
  <author>
    <name><![CDATA[phpjs.org]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript xdiff_string_patch function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/xdiff_string_patch"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/xdiff_string_patch</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's xdiff_string_patch</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdiff/xdiff_string_patch.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/xdiff/xdiff_string_patch.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">xdiff_string_patch</span> <span class="p">(</span><span class="nx">originalStr</span><span class="p">,</span> <span class="nx">patch</span><span class="p">,</span> <span class="nx">flags</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Steven Levithan (stevenlevithan.com)</span>
</span><span class='line'><span class="c1">// %        note 1: The XDIFF_PATCH_IGNORESPACE flag and the error argument are not currently supported</span>
</span><span class='line'><span class="c1">// %        note 2: This has not been widely tested</span>
</span><span class='line'><span class="c1">// *     example 1: xdiff_string_patch(&#39;&#39;, &#39;@@ -0,0 +1,1 @@\n+Hello world!&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;Hello world!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// First two functions were adapted from Steven Levithan, also under an MIT license</span>
</span><span class='line'><span class="c1">// Adapted from XRegExp 1.5.0</span>
</span><span class='line'><span class="c1">// (c) 2007-2010 Steven Levithan</span>
</span><span class='line'><span class="c1">// MIT License</span>
</span><span class='line'><span class="c1">// &amp;lt;http://xregexp.com&amp;gt;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">getNativeFlags</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">regex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">global</span> <span class="o">?</span> <span class="s2">&quot;g&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">ignoreCase</span> <span class="o">?</span> <span class="s2">&quot;i&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">multiline</span> <span class="o">?</span> <span class="s2">&quot;m&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">extended</span> <span class="o">?</span> <span class="s2">&quot;x&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="c1">// Proposed for ES4; included in AS3</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">sticky</span> <span class="o">?</span> <span class="s2">&quot;y&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'>    <span class="nx">cbSplit</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">s</span> <span class="cm">/* separator */</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If separator `s` is not a regex, use the native `split`</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">s</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Had problems to get it to work here using prototype test</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">split</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>            <span class="nx">lastLastIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">match</span><span class="p">,</span> <span class="nx">lastLength</span><span class="p">,</span> <span class="nx">limit</span> <span class="o">=</span> <span class="kc">Infinity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// This is required if not `s.global`, and it avoids needing to set `s.lastIndex` to zero</span>
</span><span class='line'>        <span class="c1">// and restore it to its original value when we&#39;re done using the regex</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">_xregexp</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">source</span><span class="p">,</span> <span class="nx">getNativeFlags</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;g&#39;</span><span class="p">);</span> <span class="c1">// Brett paring down</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">s</span><span class="p">.</span><span class="nx">_xregexp</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">source</span><span class="o">:</span> <span class="nx">x</span><span class="p">.</span><span class="nx">source</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">captureNames</span><span class="o">:</span> <span class="nx">x</span><span class="p">.</span><span class="nx">captureNames</span> <span class="o">?</span> <span class="nx">x</span><span class="p">.</span><span class="nx">captureNames</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">((</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">str</span><span class="p">)))</span> <span class="p">{</span> <span class="c1">// Run the altered `exec` (required for `lastIndex` fix, etc.)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">lastLastIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">lastLastIndex</span><span class="p">,</span> <span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">match</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">1</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">match</span><span class="p">.</span><span class="nx">index</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">output</span><span class="p">,</span> <span class="nx">match</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">lastLength</span> <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">lastLastIndex</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">limit</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">===</span> <span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">lastLastIndex</span> <span class="o">===</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">lastLength</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">lastLastIndex</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">limit</span> <span class="o">?</span> <span class="nx">output</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="o">:</span> <span class="nx">output</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ll</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ranges</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">lastLinePos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">firstChar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">rangeExp</span> <span class="o">=</span> <span class="sr">/^@@\s+-(\d+),(\d+)\s+\+(\d+),(\d+)\s+@@$/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lineBreaks</span> <span class="o">=</span> <span class="sr">/\r?\n/</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">lines</span> <span class="o">=</span> <span class="nx">cbSplit</span><span class="p">(</span><span class="nx">patch</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\r?\n)+$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="nx">lineBreaks</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">origLines</span> <span class="o">=</span> <span class="nx">cbSplit</span><span class="p">(</span><span class="nx">originalStr</span><span class="p">,</span> <span class="nx">lineBreaks</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">newStrArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">linePos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">errors</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// Both string &amp;amp; integer (constant) input is allowed</span>
</span><span class='line'>    <span class="nx">optTemp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">OPTS</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// Unsure of actual PHP values, so better to rely on string</span>
</span><span class='line'>        <span class="s1">&#39;XDIFF_PATCH_NORMAL&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;XDIFF_PATCH_REVERSE&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;XDIFF_PATCH_IGNORESPACE&#39;</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Input defaulting &amp;amp; sanitation</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">originalStr</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span> <span class="o">||</span> <span class="o">!</span><span class="nx">patch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">flags</span> <span class="o">=</span> <span class="s1">&#39;XDIFF_PATCH_NORMAL&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">flags</span> <span class="o">!==</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Allow for a single string or an array of string flags</span>
</span><span class='line'>    <span class="nx">flags</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">flags</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Resolve string input to bitwise e.g. &#39;XDIFF_PATCH_NORMAL&#39; becomes 1</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">OPTS</span><span class="p">[</span><span class="nx">flags</span><span class="p">[</span><span class="nx">i</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">optTemp</span> <span class="o">=</span> <span class="nx">optTemp</span> <span class="o">|</span> <span class="nx">OPTS</span><span class="p">[</span><span class="nx">flags</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">flags</span> <span class="o">=</span> <span class="nx">optTemp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">flags</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">XDIFF_PATCH_NORMAL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ll</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ll</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ranges</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">match</span><span class="p">(</span><span class="nx">rangeExp</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">ranges</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">lastLinePos</span> <span class="o">=</span> <span class="nx">linePos</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">linePos</span> <span class="o">=</span> <span class="nx">ranges</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nx">lastLinePos</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">linePos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">lastLinePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">rangeExp</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">firstChar</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">switch</span> <span class="p">(</span><span class="nx">firstChar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="s1">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>                    <span class="o">++</span><span class="nx">linePos</span><span class="p">;</span> <span class="c1">// Skip including that line</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="s1">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>                    <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="s1">&#39; &#39;</span><span class="o">:</span>
</span><span class='line'>                    <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">linePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="s1">&#39;Unrecognized initial character in unidiff line&#39;</span><span class="p">;</span> <span class="c1">// Reconcile with returning errrors arg?</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">flags</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">XDIFF_PATCH_REVERSE</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Only differs from above by a few lines</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ll</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ll</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ranges</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">match</span><span class="p">(</span><span class="nx">rangeExp</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">ranges</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">lastLinePos</span> <span class="o">=</span> <span class="nx">linePos</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">linePos</span> <span class="o">=</span> <span class="nx">ranges</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nx">lastLinePos</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">linePos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">lastLinePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">rangeExp</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">firstChar</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">switch</span> <span class="p">(</span><span class="nx">firstChar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="s1">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>                    <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="s1">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>                    <span class="o">++</span><span class="nx">linePos</span><span class="p">;</span> <span class="c1">// Skip including that line</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="s1">&#39; &#39;</span><span class="o">:</span>
</span><span class='line'>                    <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">linePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="s1">&#39;Unrecognized initial character in unidiff line&#39;</span><span class="p">;</span> <span class="c1">// Reconcile with returning errrors arg?</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">error</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">error</span><span class="p">]</span> <span class="o">=</span> <span class="nx">errors</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">newStrArr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/xdiff/xdiff_string_patch.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/xdiff/xdiff_string_patch.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript xdiff_string_diff function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/xdiff_string_diff"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/xdiff_string_diff</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's xdiff_string_diff</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>xdiff/xdiff_string_diff.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/xdiff/xdiff_string_diff.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
<span class='line-number'>418</span>
<span class='line-number'>419</span>
<span class='line-number'>420</span>
<span class='line-number'>421</span>
<span class='line-number'>422</span>
<span class='line-number'>423</span>
<span class='line-number'>424</span>
<span class='line-number'>425</span>
<span class='line-number'>426</span>
<span class='line-number'>427</span>
<span class='line-number'>428</span>
<span class='line-number'>429</span>
<span class='line-number'>430</span>
<span class='line-number'>431</span>
<span class='line-number'>432</span>
<span class='line-number'>433</span>
<span class='line-number'>434</span>
<span class='line-number'>435</span>
<span class='line-number'>436</span>
<span class='line-number'>437</span>
<span class='line-number'>438</span>
<span class='line-number'>439</span>
<span class='line-number'>440</span>
<span class='line-number'>441</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">xdiff_string_diff</span> <span class="p">(</span><span class="nx">old_data</span><span class="p">,</span> <span class="nx">new_data</span><span class="p">,</span> <span class="nx">context_lines</span><span class="p">,</span> <span class="nx">minimal</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   based on: Imgen Tata (http://www.myipdf.com/)</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Imgen Tata (http://www.myipdf.com/)</span>
</span><span class='line'><span class="c1">// %        note 1: The minimal argument is not currently supported</span>
</span><span class='line'><span class="c1">// *     example 1: xdiff_string_diff(&#39;&#39;, &#39;Hello world!&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;@@ -0,0 +1,1 @@\n+Hello world!&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// (This code was done by Imgen Tata; I have only reformatted for use in php.js)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// See http://en.wikipedia.org/wiki/Diff#Unified_format</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ori_hunk_start</span><span class="p">,</span> <span class="nx">new_hunk_start</span><span class="p">,</span> <span class="nx">ori_hunk_end</span><span class="p">,</span> <span class="nx">new_hunk_end</span><span class="p">,</span> <span class="nx">ori_hunk_line_no</span><span class="p">,</span> <span class="nx">new_hunk_line_no</span><span class="p">,</span> <span class="nx">ori_hunk_size</span><span class="p">,</span> <span class="nx">new_hunk_size</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">// Potential configuration</span>
</span><span class='line'>    <span class="nx">MAX_CONTEXT_LINES</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">.</span><span class="nx">POSITIVE_INFINITY</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">MIN_CONTEXT_LINES</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">DEFAULT_CONTEXT_LINES</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="nx">HEADER_PREFIX</span> <span class="o">=</span> <span class="s1">&#39;@@ &#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">HEADER_SUFFIX</span> <span class="o">=</span> <span class="s1">&#39; @@&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ORIGINAL_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">NEW_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">RANGE_SEPARATOR</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">CONTEXT_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">DELETION_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ADDITION_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ori_lines</span><span class="p">,</span> <span class="nx">new_lines</span><span class="p">,</span> <span class="nx">NEW_LINE</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="p">,</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    *Trims string</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">trim</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">text</span> <span class="o">!=</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;String parameter required&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(^\s*)|(\s*$)/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    *Verifies type of arguments</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">verify_type</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">args_len</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">basic_types</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;number&#39;</span><span class="p">,</span> <span class="s1">&#39;boolean&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="s1">&#39;function&#39;</span><span class="p">,</span> <span class="s1">&#39;object&#39;</span><span class="p">,</span> <span class="s1">&#39;undefined&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="nx">basic_type</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">type_of_type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">args_len</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span> <span class="o">=</span> <span class="nx">trim</span><span class="p">(</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">basic_types</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">basic_type</span> <span class="o">=</span> <span class="nx">basic_types</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">basic_type</span> <span class="o">==</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type&#39;</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Not basic type. we need to use instanceof operator</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nx">type</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    *Checks if the specified array contains an element with specified value</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">has_value</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">verify_type</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    *Checks the type of arguments</span>
</span><span class='line'><span class="cm">    *@param {String | Function} type Specifies the desired type</span>
</span><span class='line'><span class="cm">    *@return {Boolean} Return true if all arguments after the type argument are of specified type. Else false</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">are_type_of</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">args_len</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">basic_types</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;number&#39;</span><span class="p">,</span> <span class="s1">&#39;boolean&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="s1">&#39;function&#39;</span><span class="p">,</span> <span class="s1">&#39;object&#39;</span><span class="p">,</span> <span class="s1">&#39;undefined&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="nx">basic_type</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">type_of_type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">args_len</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">type</span> <span class="o">=</span> <span class="nx">trim</span><span class="p">(</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">basic_types</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">basic_type</span> <span class="o">=</span> <span class="nx">basic_types</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">basic_type</span> <span class="o">==</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Not basic type. we need to use instanceof operator</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nx">type</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    *Initialize and return an array with specified size and initial value</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">get_initialized_array</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">array_size</span><span class="p">,</span> <span class="nx">init_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>            <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">verify_type</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span> <span class="nx">array_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">array_size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">init_value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">array</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    *Splits text into lines and return as a string array</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">split_into_lines</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">verify_type</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">text</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">is_empty_array</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">are_type_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    * Finds longest common sequence between two sequences</span>
</span><span class='line'><span class="cm">    *See http://wordaligned.org/articles/longest-common-subsequence</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>    <span class="nx">find_longest_common_sequence</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">seq1</span><span class="p">,</span> <span class="nx">seq2</span><span class="p">,</span> <span class="nx">seq1_is_in_lcs</span><span class="p">,</span> <span class="nx">seq2_is_in_lcs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">are_type_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">seq1</span><span class="p">,</span> <span class="nx">seq2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Array parameters are required&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Deal with edge case</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">is_empty_array</span><span class="p">(</span><span class="nx">seq1</span><span class="p">)</span> <span class="o">||</span> <span class="nx">is_empty_array</span><span class="p">(</span><span class="nx">seq2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Function to calculate lcs lengths</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">lcs_lens</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">xs</span><span class="p">,</span> <span class="nx">ys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">curr</span> <span class="o">=</span> <span class="nx">get_initialized_array</span><span class="p">(</span><span class="nx">ys</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">prev</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">prev</span> <span class="o">=</span> <span class="nx">curr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">xs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">ys</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">curr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">prev</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">curr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">curr</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">prev</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">curr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>            <span class="c1">// Function to find lcs and fill in the array to indicate the optimal longest common sequence</span>
</span><span class='line'>            <span class="nx">find_lcs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">xs</span><span class="p">,</span> <span class="nx">xidx</span><span class="p">,</span> <span class="nx">xs_is_in</span><span class="p">,</span> <span class="nx">ys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">nx</span> <span class="o">=</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">ny</span> <span class="o">=</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">xb</span><span class="p">,</span> <span class="nx">xe</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">ll_b</span><span class="p">,</span> <span class="nx">ll_e</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">pivot</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">max</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">yb</span><span class="p">,</span> <span class="nx">ye</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">nx</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">nx</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">has_value</span><span class="p">(</span><span class="nx">ys</span><span class="p">,</span> <span class="nx">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">xs_is_in</span><span class="p">[</span><span class="nx">xidx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">return</span> <span class="p">[</span><span class="nx">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">i</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">nx</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">xb</span> <span class="o">=</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">xe</span> <span class="o">=</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">ll_b</span> <span class="o">=</span> <span class="nx">lcs_lens</span><span class="p">(</span><span class="nx">xb</span><span class="p">,</span> <span class="nx">ys</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">ll_e</span> <span class="o">=</span> <span class="nx">lcs_lens</span><span class="p">(</span><span class="nx">xe</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">reverse</span><span class="p">(),</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">reverse</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nx">pivot</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">ny</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">ll_b</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">ll_e</span><span class="p">[</span><span class="nx">ny</span> <span class="o">-</span> <span class="nx">j</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>                            <span class="nx">max</span> <span class="o">=</span> <span class="nx">ll_b</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">ll_e</span><span class="p">[</span><span class="nx">ny</span> <span class="o">-</span> <span class="nx">j</span><span class="p">];</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="nx">yb</span> <span class="o">=</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">ye</span> <span class="o">=</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">pivot</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">return</span> <span class="nx">find_lcs</span><span class="p">(</span><span class="nx">xb</span><span class="p">,</span> <span class="nx">xidx</span><span class="p">,</span> <span class="nx">xs_is_in</span><span class="p">,</span> <span class="nx">yb</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">find_lcs</span><span class="p">(</span><span class="nx">xe</span><span class="p">,</span> <span class="nx">xidx</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">xs_is_in</span><span class="p">,</span> <span class="nx">ye</span><span class="p">));</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Fill in seq1_is_in_lcs to find the optimal longest common subsequence of first sequence</span>
</span><span class='line'>        <span class="nx">find_lcs</span><span class="p">(</span><span class="nx">seq1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">seq1_is_in_lcs</span><span class="p">,</span> <span class="nx">seq2</span><span class="p">);</span>
</span><span class='line'>        <span class="c1">// Fill in seq2_is_in_lcs to find the optimal longest common subsequence of second sequence and return the result</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">find_lcs</span><span class="p">(</span><span class="nx">seq2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">seq2_is_in_lcs</span><span class="p">,</span> <span class="nx">seq1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// First, check the parameters</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">are_type_of</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="nx">old_data</span><span class="p">,</span> <span class="nx">new_data</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">old_data</span> <span class="o">==</span> <span class="nx">new_data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">context_lines</span> <span class="o">!=</span> <span class="s1">&#39;number&#39;</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">MAX_CONTEXT_LINES</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">MIN_CONTEXT_LINES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">context_lines</span> <span class="o">=</span> <span class="nx">DEFAULT_CONTEXT_LINES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ori_lines</span> <span class="o">=</span> <span class="nx">split_into_lines</span><span class="p">(</span><span class="nx">old_data</span><span class="p">);</span>
</span><span class='line'><span class="nx">new_lines</span> <span class="o">=</span> <span class="nx">split_into_lines</span><span class="p">(</span><span class="nx">new_data</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ori_len</span> <span class="o">=</span> <span class="nx">ori_lines</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">new_len</span> <span class="o">=</span> <span class="nx">new_lines</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">ori_is_in_lcs</span> <span class="o">=</span> <span class="nx">get_initialized_array</span><span class="p">(</span><span class="nx">ori_len</span><span class="p">,</span> <span class="kc">false</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">new_is_in_lcs</span> <span class="o">=</span> <span class="nx">get_initialized_array</span><span class="p">(</span><span class="nx">new_len</span><span class="p">,</span> <span class="kc">false</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">lcs_len</span> <span class="o">=</span> <span class="nx">find_longest_common_sequence</span><span class="p">(</span><span class="nx">ori_lines</span><span class="p">,</span> <span class="nx">new_lines</span><span class="p">,</span> <span class="nx">ori_is_in_lcs</span><span class="p">,</span> <span class="nx">new_is_in_lcs</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">unidiff</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">lcs_len</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// No common sequence</span>
</span><span class='line'>    <span class="nx">unidiff</span> <span class="o">=</span> <span class="nx">HEADER_PREFIX</span> <span class="o">+</span> <span class="nx">ORIGINAL_INDICATOR</span> <span class="o">+</span> <span class="p">(</span><span class="nx">ori_len</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;1&#39;</span> <span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">ori_len</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">NEW_INDICATOR</span> <span class="o">+</span> <span class="p">(</span><span class="nx">new_len</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;1&#39;</span> <span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">new_len</span> <span class="o">+</span> <span class="nx">HEADER_SUFFIX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">NEW_LINE</span> <span class="o">+</span> <span class="nx">DELETION_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_lines</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">new_len</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">NEW_LINE</span> <span class="o">+</span> <span class="nx">ADDITION_INDICATOR</span> <span class="o">+</span> <span class="nx">new_lines</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">unidiff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">leading_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">trailing_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">actual_leading_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">actual_trailing_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Regularize leading context by the context_lines parameter</span>
</span><span class='line'>    <span class="nx">regularize_leading_context</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">context_start_pos</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">context_lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">context_start_pos</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Regularize trailing context by the context_lines parameter</span>
</span><span class='line'>    <span class="nx">regularize_trailing_context</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">context_lines</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Skip common lines in the beginning</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">leading_context</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ori_lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'><span class="nx">k</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span> <span class="c1">// The index in the longest common sequence</span>
</span><span class='line'><span class="nx">ori_hunk_start</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'><span class="nx">new_hunk_start</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'><span class="nx">ori_hunk_end</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'><span class="nx">new_hunk_end</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_len</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">new_len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">ori_hunk_end</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">new_len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">new_hunk_end</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Find the trailing context</span>
</span><span class='line'>    <span class="nx">trailing_context</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">new_len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">trailing_context</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ori_lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="nx">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">k</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">lcs_len</span> <span class="o">||</span> <span class="c1">// No more in longest common lines</span>
</span><span class='line'>    <span class="nx">trailing_context</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">context_lines</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Context break found</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">trailing_context</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">context_lines</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// It must be last block of common lines but not a context break</span>
</span><span class='line'>            <span class="nx">trailing_context</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Force break out</span>
</span><span class='line'>            <span class="nx">i</span> <span class="o">=</span> <span class="nx">ori_len</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">j</span> <span class="o">=</span> <span class="nx">new_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Update hunk ends to force output to the end</span>
</span><span class='line'>            <span class="nx">ori_hunk_end</span> <span class="o">=</span> <span class="nx">ori_len</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">new_hunk_end</span> <span class="o">=</span> <span class="nx">new_len</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Output the diff hunk</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Trim the leading and trailing context block</span>
</span><span class='line'>        <span class="nx">actual_leading_context</span> <span class="o">=</span> <span class="nx">regularize_leading_context</span><span class="p">(</span><span class="nx">leading_context</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">actual_trailing_context</span> <span class="o">=</span> <span class="nx">regularize_trailing_context</span><span class="p">(</span><span class="nx">trailing_context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">ori_hunk_start</span> <span class="o">-=</span> <span class="nx">actual_leading_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">new_hunk_start</span> <span class="o">-=</span> <span class="nx">actual_leading_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">ori_hunk_end</span> <span class="o">+=</span> <span class="nx">actual_trailing_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">new_hunk_end</span> <span class="o">+=</span> <span class="nx">actual_trailing_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">ori_hunk_line_no</span> <span class="o">=</span> <span class="nx">ori_hunk_start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">new_hunk_line_no</span> <span class="o">=</span> <span class="nx">new_hunk_start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">ori_hunk_size</span> <span class="o">=</span> <span class="nx">ori_hunk_end</span> <span class="o">-</span> <span class="nx">ori_hunk_start</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">new_hunk_size</span> <span class="o">=</span> <span class="nx">new_hunk_end</span> <span class="o">-</span> <span class="nx">new_hunk_start</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Build header</span>
</span><span class='line'>        <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">HEADER_PREFIX</span> <span class="o">+</span> <span class="nx">ORIGINAL_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_hunk_line_no</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">ori_hunk_size</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">NEW_INDICATOR</span> <span class="o">+</span> <span class="nx">new_hunk_line_no</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">new_hunk_size</span> <span class="o">+</span> <span class="nx">HEADER_SUFFIX</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Build the diff hunk content</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nx">ori_hunk_start</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_hunk_end</span> <span class="o">||</span> <span class="nx">new_hunk_start</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">new_hunk_end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">ori_hunk_start</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_hunk_end</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">new_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The context line</span>
</span><span class='line'>                <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">CONTEXT_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_lines</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">ori_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">new_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">ori_hunk_start</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">ori_hunk_end</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The deletion line</span>
</span><span class='line'>                <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">DELETION_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_lines</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">ori_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">new_hunk_start</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">new_hunk_end</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">new_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The additional line</span>
</span><span class='line'>                <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">ADDITION_INDICATOR</span> <span class="o">+</span> <span class="nx">new_lines</span><span class="p">[</span><span class="nx">new_hunk_start</span><span class="p">]</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">new_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Update hunk position and leading context</span>
</span><span class='line'>        <span class="nx">ori_hunk_start</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">new_hunk_start</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">leading_context</span> <span class="o">=</span> <span class="nx">trailing_context</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Trim the trailing new line if it exists</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">unidiff</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">unidiff</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">unidiff</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">===</span> <span class="nx">NEW_LINE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">unidiff</span> <span class="o">=</span> <span class="nx">unidiff</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">unidiff</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/xdiff/xdiff_string_diff.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/xdiff/xdiff_string_diff.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
