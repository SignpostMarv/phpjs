<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | php.js]]></title>
  <link href="http://kvz.github.com/phpjs//categories/misc/atom.xml" rel="self"/>
  <link href="http://kvz.github.com/phpjs//"/>
  <updated>2012-05-17T23:03:58+02:00</updated>
  <id>http://kvz.github.com/phpjs//</id>
  <author>
    <name><![CDATA[phpjs.org]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript uniqid function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/uniqid"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/uniqid</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's uniqid</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>misc/uniqid.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/misc/uniqid.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">uniqid</span> <span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">more_entropy</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +    revised by: Kankrelune (http://www.webfaktory.info/)</span>
</span><span class='line'><span class="c1">// %        note 1: Uses an internal counter (in php_js global) to avoid collision</span>
</span><span class='line'><span class="c1">// *     example 1: uniqid();</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;a30285b160c14&#39;</span>
</span><span class='line'><span class="c1">// *     example 2: uniqid(&#39;foo&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 2: &#39;fooa30285b1cd361&#39;</span>
</span><span class='line'><span class="c1">// *     example 3: uniqid(&#39;bar&#39;, true);</span>
</span><span class='line'><span class="c1">// *     returns 3: &#39;bara20285b23dfd1.31879087&#39;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">prefix</span> <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">prefix</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">retId</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">formatSeed</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">seed</span><span class="p">,</span> <span class="nx">reqWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">seed</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">seed</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span> <span class="c1">// to hex str</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">reqWidth</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// so long we split</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">seed</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">reqWidth</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">reqWidth</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// so short we pad</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nx">reqWidth</span> <span class="o">-</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">length</span><span class="p">)).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">seed</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">seed</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// END REDUNDANT</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// init seed with big random int</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mh">0x75bcd15</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">retId</span> <span class="o">=</span> <span class="nx">prefix</span><span class="p">;</span> <span class="c1">// start with prefix, add current milliseconds hex string</span>
</span><span class='line'><span class="nx">retId</span> <span class="o">+=</span> <span class="nx">formatSeed</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'><span class="nx">retId</span> <span class="o">+=</span> <span class="nx">formatSeed</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// add seed hex string</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">more_entropy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// for more entropy we add a float lower to 10</span>
</span><span class='line'>    <span class="nx">retId</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">8</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">retId</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/misc/uniqid.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/misc/uniqid.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript time_sleep_until function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/time_sleep_until"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/time_sleep_until</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's time_sleep_until</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>misc/time_sleep_until.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/misc/time_sleep_until.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">time_sleep_until</span> <span class="p">(</span><span class="nx">timestamp</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// %          note: For study purposes. Current implementation could lock up the user&#39;s browser.</span>
</span><span class='line'><span class="c1">// %          note: Expects a timestamp in seconds, so DO NOT pass in a JavaScript timestamp which are in milliseconds (e.g., new Date()) or otherwise the function will lock up the browser 1000 times longer than probably intended.</span>
</span><span class='line'><span class="c1">// %          note: Consider using setTimeout() instead.</span>
</span><span class='line'><span class="c1">// *     example 1: time_sleep_until(1233146501) // delays until the time indicated by the given timestamp is reached</span>
</span><span class='line'><span class="c1">// *     returns 1: true</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">timestamp</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'><span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/misc/time_sleep_until.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/misc/time_sleep_until.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript php_strip_whitespace function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/php_strip_whitespace"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/php_strip_whitespace</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's php_strip_whitespace</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>misc/php_strip_whitespace.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/misc/php_strip_whitespace.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">php_strip_whitespace</span> <span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// %        note 1: This function uses XmlHttpRequest and cannot retrieve resource from different domain.</span>
</span><span class='line'><span class="c1">// %        note 1: Synchronous so may lock up browser, mainly here for study purposes.</span>
</span><span class='line'><span class="c1">// %        note 1: To avoid browser blocking issues&#39;s consider using jQuery&#39;s: $(&#39;#divId&#39;).load(&#39;http://url&#39;) instead.</span>
</span><span class='line'><span class="c1">// -    depends on: file_get_contents</span>
</span><span class='line'><span class="c1">// *     example 1: php_strip_whitespace(&#39;http://kevin.vanzonneveld.net/pj_test_supportfile_1.htm&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;123&#39;</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="nx">file</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// Strip comments (both styles), reduce non-newline whitespace to one, reduce multiple</span>
</span><span class='line'><span class="c1">// newlines (preceded by any whitespace) to a newline, remove WS at beginning of line,</span>
</span><span class='line'><span class="c1">// and at end of line</span>
</span><span class='line'><span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\/\/.*?\n/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\/\*[\s\S]*?\*\//g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[ \f\r\t\v\u00A0\u2028\u2029]+/g</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s*\n+/g</span><span class="p">,</span> <span class="s1">&#39;\n&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s+/gm</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s*$/gm</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/misc/php_strip_whitespace.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/misc/php_strip_whitespace.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript pack function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/pack"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/pack</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's pack</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>misc/pack.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/misc/pack.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">pack</span> <span class="p">(</span><span class="nx">format</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Tim de Koning (http://www.kingsquare.nl)</span>
</span><span class='line'><span class="c1">// +      parts by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)</span>
</span><span class='line'><span class="c1">// +   bugfixed by: Tim de Koning (http://www.kingsquare.nl)</span>
</span><span class='line'><span class="c1">// %        note 1: Float encoding by: Jonas Raoni Soares Silva</span>
</span><span class='line'><span class="c1">// %        note 2: Home: http://www.kingsquare.nl/blog/12-12-2009/13507444</span>
</span><span class='line'><span class="c1">// %        note 3: Feedback: phpjs-pack@kingsquare.nl</span>
</span><span class='line'><span class="c1">// %        note 4: &#39;machine dependent byte order and size&#39; aren&#39;t</span>
</span><span class='line'><span class="c1">// %        note 4: applicable for JavaScript; pack works as on a 32bit,</span>
</span><span class='line'><span class="c1">// %        note 4: little endian machine</span>
</span><span class='line'><span class="c1">// *     example 1: pack(&#39;nvc*&#39;, 0x1234, 0x5678, 65, 66);</span>
</span><span class='line'><span class="c1">// *     returns 1: &#39;4xVAB&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">formatPointer</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">argumentPointer</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">result</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">argument</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">r</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">instruction</span><span class="p">,</span> <span class="nx">quantifier</span><span class="p">,</span> <span class="nx">word</span><span class="p">,</span> <span class="nx">precisionBits</span><span class="p">,</span> <span class="nx">exponentBits</span><span class="p">,</span> <span class="nx">extraNullCount</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// vars used by float encoding</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bias</span><span class="p">,</span> <span class="nx">minExp</span><span class="p">,</span> <span class="nx">maxExp</span><span class="p">,</span> <span class="nx">minUnnormExp</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">exp</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="nx">bin</span><span class="p">,</span> <span class="nx">signal</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">intPart</span><span class="p">,</span> <span class="nx">floatPart</span><span class="p">,</span> <span class="nx">lastBit</span><span class="p">,</span> <span class="nx">rounded</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">tmpResult</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="nx">formatPointer</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">format</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">instruction</span> <span class="o">=</span> <span class="nx">format</span><span class="p">[</span><span class="nx">formatPointer</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">quantifier</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">formatPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">((</span><span class="nx">formatPointer</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">format</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">format</span><span class="p">[</span><span class="nx">formatPointer</span><span class="p">].</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[\d\*]/</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">quantifier</span> <span class="o">+=</span> <span class="nx">format</span><span class="p">[</span><span class="nx">formatPointer</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">formatPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">quantifier</span> <span class="o">=</span> <span class="s1">&#39;1&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Now pack variables: &#39;quantifier&#39; times &#39;instruction&#39;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="nx">instruction</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;a&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// NUL-padded string</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;A&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// SPACE-padded string</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: not enough arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">argument</span> <span class="o">=</span> <span class="nb">String</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">argument</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">argument</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">instruction</span> <span class="o">===</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">result</span> <span class="o">+=</span> <span class="s1">&#39; &#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">result</span> <span class="o">+=</span> <span class="nx">argument</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;h&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Hex string, low nibble first</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;H&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Hex string, high nibble first</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning: pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: not enough arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">argument</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">argument</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">argument</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning: pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: not enough characters in string&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Always get per 2 bytes...</span>
</span><span class='line'>            <span class="nx">word</span> <span class="o">=</span> <span class="nx">argument</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(((</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">quantifier</span><span class="p">)</span> <span class="o">||</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">argument</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">word</span> <span class="o">+=</span> <span class="s1">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">word</span> <span class="o">+=</span> <span class="nx">argument</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// The fastest way to reverse?</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">instruction</span> <span class="o">===</span> <span class="s1">&#39;h&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">word</span> <span class="o">=</span> <span class="nx">word</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nx">word</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">word</span><span class="p">,</span> <span class="mi">16</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;c&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// signed char</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;C&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// unsigned char</span>
</span><span class='line'>        <span class="c1">// c and C is the same in pack</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]);</span>
</span><span class='line'>            <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;s&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// signed short (always 16 bit, machine byte order)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;S&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// unsigned short (always 16 bit, machine byte order)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;v&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// s and S is the same in pack</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;n&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// unsigned short (always 16 bit, big endian byte order)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;i&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// signed integer (machine dependent size and byte order)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;I&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// unsigned integer (machine dependent size and byte order)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;l&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// signed long (always 32 bit, machine byte order)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;L&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// unsigned long (always 32 bit, machine byte order)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;V&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// unsigned long (always 32 bit, little endian byte order)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">16</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">24</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;N&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// unsigned long (always 32 bit, big endian byte order)</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">24</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">16</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">8</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="mh">0xFF</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;f&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// float (machine dependent size and representation)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;d&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// double (machine dependent size and representation)</span>
</span><span class='line'>        <span class="c1">// version based on IEEE754</span>
</span><span class='line'>        <span class="nx">precisionBits</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">exponentBits</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">instruction</span> <span class="o">===</span> <span class="s1">&#39;d&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">precisionBits</span> <span class="o">=</span> <span class="mi">52</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">exponentBits</span> <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">quantifier</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">argument</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">argumentPointer</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">bias</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">exponentBits</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">minExp</span> <span class="o">=</span> <span class="o">-</span><span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">maxExp</span> <span class="o">=</span> <span class="nx">bias</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">minUnnormExp</span> <span class="o">=</span> <span class="nx">minExp</span> <span class="o">-</span> <span class="nx">precisionBits</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">status</span> <span class="o">=</span> <span class="nb">isNaN</span><span class="p">(</span><span class="nx">n</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">argument</span><span class="p">))</span> <span class="o">||</span> <span class="nx">n</span> <span class="o">===</span> <span class="o">-</span><span class="kc">Infinity</span> <span class="o">||</span> <span class="nx">n</span> <span class="o">===</span> <span class="o">+</span><span class="kc">Infinity</span> <span class="o">?</span> <span class="nx">n</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">exp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">len</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="nx">precisionBits</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">bin</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">len</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">signal</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span> <span class="o">=</span> <span class="nx">status</span> <span class="o">!==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="nx">n</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">n</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">intPart</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">floatPart</span> <span class="o">=</span> <span class="nx">n</span> <span class="o">-</span> <span class="nx">intPart</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="o">=</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">k</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">bin</span><span class="p">[</span><span class="o">--</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="o">=</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">intPart</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">k</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">bin</span><span class="p">[</span><span class="o">--</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">intPart</span> <span class="o">%</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">intPart</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">intPart</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="o">=</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">floatPart</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">k</span><span class="p">;</span> <span class="o">--</span><span class="nx">floatPart</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">(</span><span class="nx">bin</span><span class="p">[</span><span class="o">++</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="nx">floatPart</span> <span class="o">*=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="nx">k</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="o">!</span><span class="nx">bin</span><span class="p">[</span><span class="nx">k</span><span class="p">];)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">bin</span><span class="p">[(</span><span class="nx">lastBit</span> <span class="o">=</span> <span class="nx">precisionBits</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nx">k</span> <span class="o">=</span> <span class="p">(</span><span class="nx">exp</span> <span class="o">=</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="nx">k</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">minExp</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">exp</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">maxExp</span> <span class="o">?</span> <span class="nx">k</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">exp</span> <span class="o">=</span> <span class="nx">minExp</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">rounded</span> <span class="o">=</span> <span class="nx">bin</span><span class="p">[</span><span class="nx">lastBit</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">lastBit</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="o">!</span><span class="nx">rounded</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">rounded</span> <span class="o">=</span> <span class="nx">bin</span><span class="p">[</span><span class="nx">j</span><span class="o">++</span><span class="p">])</span> <span class="p">{}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">lastBit</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">rounded</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="o">--</span><span class="nx">j</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="p">(</span><span class="nx">bin</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">!</span><span class="nx">bin</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="p">(</span><span class="nx">rounded</span> <span class="o">=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="o">=</span> <span class="nx">k</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="nx">k</span> <span class="o">-</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="nx">k</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="o">!</span><span class="nx">bin</span><span class="p">[</span><span class="nx">k</span><span class="p">];)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="nx">exp</span> <span class="o">=</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="nx">k</span><span class="p">)</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">minExp</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">exp</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="nx">maxExp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="o">++</span><span class="nx">k</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">exp</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">minExp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">exp</span> <span class="o">!==</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="nx">len</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">exp</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">minUnnormExp</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*&quot;encodeFloat::float underflow&quot; */</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="nx">k</span> <span class="o">=</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="p">(</span><span class="nx">exp</span> <span class="o">=</span> <span class="nx">minExp</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">intPart</span> <span class="o">||</span> <span class="nx">status</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">exp</span> <span class="o">=</span> <span class="nx">maxExp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">k</span> <span class="o">=</span> <span class="nx">bias</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">status</span> <span class="o">===</span> <span class="o">-</span><span class="kc">Infinity</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">signal</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">status</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">bin</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">n</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">exp</span> <span class="o">+</span> <span class="nx">bias</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">tmpResult</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">exponentBits</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="o">--</span><span class="nx">j</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">tmpResult</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="nx">tmpResult</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">n</span> <span class="o">=</span> <span class="nx">n</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">k</span> <span class="o">=</span> <span class="p">(</span><span class="nx">tmpResult</span> <span class="o">=</span> <span class="p">(</span><span class="nx">signal</span> <span class="o">?</span> <span class="s1">&#39;1&#39;</span> <span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">tmpResult</span> <span class="o">+</span> <span class="nx">bin</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">k</span> <span class="o">+</span> <span class="nx">precisionBits</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)).</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">r</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(;</span> <span class="nx">k</span><span class="p">;)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">n</span> <span class="o">+=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">j</span><span class="p">)</span> <span class="o">*</span> <span class="nx">tmpResult</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="o">--</span><span class="nx">k</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">j</span> <span class="o">===</span> <span class="mi">7</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="nx">j</span> <span class="o">=</span> <span class="p">(</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">r</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">n</span> <span class="o">?</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">argumentPointer</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;x&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// NUL byte</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning: pack(): Type x: \&#39;*\&#39; ignored&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;X&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// Back up one byte</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning: pack(): Type X: \&#39;*\&#39; ignored&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">quantifier</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning: pack(): Type X:&#39;</span> <span class="o">+</span> <span class="s1">&#39; outside of string&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;@&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="c1">// NUL-fill to absolute position</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">===</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning: pack(): Type X: \&#39;*\&#39; ignored&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">extraNullCount</span> <span class="o">=</span> <span class="nx">quantifier</span> <span class="o">-</span> <span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">extraNullCount</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">result</span> <span class="o">+=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">quantifier</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">result</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">quantifier</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning:  pack() Type &#39;</span> <span class="o">+</span> <span class="nx">instruction</span> <span class="o">+</span> <span class="s1">&#39;: unknown format code&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">argumentPointer</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Warning: pack(): &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">argumentPointer</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; arguments unused&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/misc/pack.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/misc/pack.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript defined function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/defined"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/defined</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's defined</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>misc/defined.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/misc/defined.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">defined</span> <span class="p">(</span><span class="nx">constant_name</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Waldo Malqui Silva</span>
</span><span class='line'><span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +    revised by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// %          note 1: Because this function can (albeit only temporarily) overwrite a global variable,</span>
</span><span class='line'><span class="c1">// %          note 1: it is not thread-safe (normally not a concern for JavaScript, but would be if used</span>
</span><span class='line'><span class="c1">// %          note 1: in a threaded environment, e.g., DOM worker threads)</span>
</span><span class='line'><span class="c1">// *     example 1: defined(&#39;IMAGINARY_CONSTANT1&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: false</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">constant_name</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">constant_name</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">constant_name</span><span class="p">]</span> <span class="o">?</span> <span class="s1">&#39;changed&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">constant_name</span><span class="p">].</span><span class="nx">toString</span><span class="p">()</span> <span class="o">:</span> <span class="s1">&#39;changed&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">returnval</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">constant_name</span><span class="p">]</span> <span class="o">===</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">returnval</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Reset</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">constant_name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tmp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">returnval</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/misc/defined.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/misc/defined.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
