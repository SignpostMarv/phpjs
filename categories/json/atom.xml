<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: json | php.js]]></title>
  <link href="http://kvz.github.com/phpjs//categories/json/atom.xml" rel="self"/>
  <link href="http://kvz.github.com/phpjs//"/>
  <updated>2012-05-17T23:03:58+02:00</updated>
  <id>http://kvz.github.com/phpjs//</id>
  <author>
    <name><![CDATA[phpjs.org]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript json_last_error function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/json_last_error"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/json_last_error</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's json_last_error</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>json/json_last_error.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/json/json_last_error.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">json_last_error</span> <span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// *     example 1: json_last_error();</span>
</span><span class='line'><span class="c1">// *     returns 1: 0</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;JSON_ERROR_NONE = 0</span>
</span><span class='line'><span class="cm">JSON_ERROR_DEPTH = 1 // max depth limit to be removed per PHP comments in json.c (not possible in JS?)</span>
</span><span class='line'><span class="cm">JSON_ERROR_STATE_MISMATCH = 2 // internal use? also not documented</span>
</span><span class='line'><span class="cm">JSON_ERROR_CTRL_CHAR = 3 // [\u0000-\u0008\u000B-\u000C\u000E-\u001F] if used directly within json_decode(),</span>
</span><span class='line'><span class="cm">                                                              // but JSON functions auto-escape these, so error not possible in JavaScript</span>
</span><span class='line'><span class="cm">JSON_ERROR_SYNTAX = 4</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">last_error_json</span> <span class="o">?</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">last_error_json</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/json/json_last_error.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/json/json_last_error.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript json_encode function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/json_encode"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/json_encode</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's json_encode</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>json/json_encode.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/json/json_encode.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">json_encode</span> <span class="p">(</span><span class="nx">mixed_val</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +      original by: Public Domain (http://www.json.org/json2.js)</span>
</span><span class='line'><span class="c1">// + reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +      improved by: Michael White</span>
</span><span class='line'><span class="c1">// +      input by: felix</span>
</span><span class='line'><span class="c1">// +      bugfixed by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// *        example 1: json_encode([&#39;e&#39;, {pluribus: &#39;unum&#39;}]);</span>
</span><span class='line'><span class="c1">// *        returns 1: &#39;[\n    &quot;e&quot;,\n    {\n    &quot;pluribus&quot;: &quot;unum&quot;\n}\n]&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    http://www.JSON.org/json2.js</span>
</span><span class='line'><span class="cm">    2008-11-19</span>
</span><span class='line'><span class="cm">    Public Domain.</span>
</span><span class='line'><span class="cm">    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.</span>
</span><span class='line'><span class="cm">    See http://www.JSON.org/js.html</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">retVal</span><span class="p">,</span> <span class="nx">json</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">JSON</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">json</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">typeof</span> <span class="nx">json</span><span class="p">.</span><span class="nx">stringify</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">retVal</span> <span class="o">=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">mixed_val</span><span class="p">);</span> <span class="c1">// Errors will not be caught here if our own equivalent to resource</span>
</span><span class='line'>        <span class="c1">//  (an instance of PHPJS_Resource) is used</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">retVal</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">SyntaxError</span><span class="p">(</span><span class="s1">&#39;json_encode&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">retVal</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">mixed_val</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">quote</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">escapable</span> <span class="o">=</span> <span class="sr">/[\\\&quot;\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">meta</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// table of character substitutions</span>
</span><span class='line'>            <span class="s1">&#39;\b&#39;</span><span class="o">:</span> <span class="s1">&#39;\\b&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;\t&#39;</span><span class="o">:</span> <span class="s1">&#39;\\t&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;\n&#39;</span><span class="o">:</span> <span class="s1">&#39;\\n&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;\f&#39;</span><span class="o">:</span> <span class="s1">&#39;\\f&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;\r&#39;</span><span class="o">:</span> <span class="s1">&#39;\\r&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;&quot;&#39;</span><span class="o">:</span> <span class="s1">&#39;\\&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;\\&#39;</span><span class="o">:</span> <span class="s1">&#39;\\\\&#39;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">escapable</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">escapable</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">string</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">escapable</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">meta</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">typeof</span> <span class="nx">c</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span> <span class="o">?</span> <span class="nx">c</span> <span class="o">:</span> <span class="s1">&#39;\\u&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;0000&#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>        <span class="p">})</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">:</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">string</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">holder</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">gap</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">indent</span> <span class="o">=</span> <span class="s1">&#39;    &#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// The loop counter.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="c1">// The member key.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">v</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span> <span class="c1">// The member value.</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">length</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">mind</span> <span class="o">=</span> <span class="nx">gap</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">partial</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">holder</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If the value has a toJSON method, call it to obtain a replacement value.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">value</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">typeof</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toJSON</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">value</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// What happens next depends on the value&#39;s type.</span>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;string&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">quote</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;number&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// JSON numbers must be finite. Encode non-finite numbers as null.</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">isFinite</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">?</span> <span class="nb">String</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">:</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;boolean&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;null&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// If the value is a boolean or null, convert it to a string. Note:</span>
</span><span class='line'>            <span class="c1">// typeof null does not produce &#39;null&#39;. The case is included here in</span>
</span><span class='line'>            <span class="c1">// the remote chance that this gets fixed someday.</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;object&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// If the type is &#39;object&#39;, we might be dealing with an object or an array or</span>
</span><span class='line'>            <span class="c1">// null.</span>
</span><span class='line'>            <span class="c1">// Due to a specification blunder in ECMAScript, typeof null is &#39;object&#39;,</span>
</span><span class='line'>            <span class="c1">// so watch out for that case.</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="k">this</span><span class="p">.</span><span class="nx">PHPJS_Resource</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="k">this</span><span class="p">.</span><span class="nx">PHPJS_Resource</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">PHPJS_Resource</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">value</span> <span class="k">instanceof</span> <span class="nb">window</span><span class="p">.</span><span class="nx">PHPJS_Resource</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">SyntaxError</span><span class="p">(</span><span class="s1">&#39;json_encode&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Make an array to hold the partial results of stringifying this object value.</span>
</span><span class='line'>            <span class="nx">gap</span> <span class="o">+=</span> <span class="nx">indent</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">partial</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Is the value an array?</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// The value is an array. Stringify every element. Use null as a placeholder</span>
</span><span class='line'>                <span class="c1">// for non-JSON values.</span>
</span><span class='line'>                <span class="nx">length</span> <span class="o">=</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">partial</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">str</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Join all of the elements together, separated with commas, and wrap them in</span>
</span><span class='line'>                <span class="c1">// brackets.</span>
</span><span class='line'>                <span class="nx">v</span> <span class="o">=</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;[]&#39;</span> <span class="o">:</span> <span class="nx">gap</span> <span class="o">?</span> <span class="s1">&#39;[\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span> <span class="o">+</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span> <span class="nx">mind</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span> <span class="o">:</span> <span class="s1">&#39;[&#39;</span> <span class="o">+</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">gap</span> <span class="o">=</span> <span class="nx">mind</span><span class="p">;</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">v</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Iterate through all of the keys in the object.</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">v</span> <span class="o">=</span> <span class="nx">str</span><span class="p">(</span><span class="nx">k</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">partial</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">quote</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">gap</span> <span class="o">?</span> <span class="s1">&#39;: &#39;</span> <span class="o">:</span> <span class="s1">&#39;:&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">v</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Join all of the member texts together, separated with commas,</span>
</span><span class='line'>            <span class="c1">// and wrap them in braces.</span>
</span><span class='line'>            <span class="nx">v</span> <span class="o">=</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;{}&#39;</span> <span class="o">:</span> <span class="nx">gap</span> <span class="o">?</span> <span class="s1">&#39;{\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span> <span class="o">+</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,\n&#39;</span> <span class="o">+</span> <span class="nx">gap</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span> <span class="nx">mind</span> <span class="o">+</span> <span class="s1">&#39;}&#39;</span> <span class="o">:</span> <span class="s1">&#39;{&#39;</span> <span class="o">+</span> <span class="nx">partial</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;}&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">gap</span> <span class="o">=</span> <span class="nx">mind</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">v</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;undefined&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// Fall-through</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;function&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="c1">// Fall-through</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">SyntaxError</span><span class="p">(</span><span class="s1">&#39;json_encode&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make a fake root object containing our value under the key of &#39;&#39;.</span>
</span><span class='line'>    <span class="c1">// Return the result of stringifying the value.</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">str</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="s1">&#39;&#39;</span><span class="o">:</span> <span class="nx">value</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Todo: ensure error handling above throws a SyntaxError in all cases where it could</span>
</span><span class='line'>    <span class="c1">// (i.e., when the JSON global is not available and there is an error)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">SyntaxError</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Unexpected error type in json_encode()&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">last_error_json</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// usable by json_last_error()</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/json/json_encode.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/json/json_encode.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript json_decode function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/json_decode"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/json_decode</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's json_decode</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>json/json_decode.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/json/json_decode.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">json_decode</span> <span class="p">(</span><span class="nx">str_json</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +      original by: Public Domain (http://www.json.org/json2.js)</span>
</span><span class='line'><span class="c1">// + reimplemented by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +      improved by: T.J. Leahy</span>
</span><span class='line'><span class="c1">// +      improved by: Michael White</span>
</span><span class='line'><span class="c1">// *        example 1: json_decode(&#39;[\n    &quot;e&quot;,\n    {\n    &quot;pluribus&quot;: &quot;unum&quot;\n}\n]&#39;);</span>
</span><span class='line'><span class="c1">// *        returns 1: [&#39;e&#39;, {pluribus: &#39;unum&#39;}]</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="cm">/*&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">&lt;pre&gt;&lt;code&gt;    http://www.JSON.org/json2.js</span>
</span><span class='line'><span class="cm">    2008-11-19</span>
</span><span class='line'><span class="cm">    Public Domain.</span>
</span><span class='line'><span class="cm">    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.</span>
</span><span class='line'><span class="cm">    See http://www.JSON.org/js.html</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">json</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nx">JSON</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">json</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">typeof</span> <span class="nx">json</span><span class="p">.</span><span class="nx">parse</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">json</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">str_json</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">err</span> <span class="k">instanceof</span> <span class="nx">SyntaxError</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Unexpected error type in json_decode()&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">last_error_json</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// usable by json_last_error()</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cx</span> <span class="o">=</span> <span class="sr">/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">str_json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Parsing happens in four stages. In the first stage, we replace certain</span>
</span><span class='line'><span class="c1">// Unicode characters with escape sequences. JavaScript handles many characters</span>
</span><span class='line'><span class="c1">// incorrectly, either silently deleting them, or treating them as line endings.</span>
</span><span class='line'><span class="nx">cx</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">cx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="nx">cx</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;\\u&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="s1">&#39;0000&#39;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// In the second stage, we run the text against regular expressions that look</span>
</span><span class='line'><span class="c1">// for non-JSON patterns. We are especially concerned with &#39;()&#39; and &#39;new&#39;</span>
</span><span class='line'><span class="c1">// because they can cause invocation, and &#39;=&#39; because it can cause mutation.</span>
</span><span class='line'><span class="c1">// But just to be safe, we want to reject all unexpected forms.</span>
</span><span class='line'><span class="c1">// We split the second stage into 4 regexp operations in order to work around</span>
</span><span class='line'><span class="c1">// crippling inefficiencies in IE&#39;s and Safari&#39;s regexp engines. First we</span>
</span><span class='line'><span class="c1">// replace the JSON backslash pairs with &#39;@&#39; (a non-JSON character). Second, we</span>
</span><span class='line'><span class="c1">// replace all simple value tokens with &#39;]&#39; characters. Third, we delete all</span>
</span><span class='line'><span class="c1">// open brackets that follow a colon or comma or that begin the text. Finally,</span>
</span><span class='line'><span class="c1">// we look to see that the remaining characters are only whitespace or &#39;]&#39; or</span>
</span><span class='line'><span class="c1">// &#39;,&#39; or &#39;:&#39; or &#39;{&#39; or &#39;}&#39;. If that is so, then the text is safe for eval.</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="sr">/^[\],:{}\s]*$/</span><span class="p">).</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\\(?:[&quot;\\\/bfnrt]|u[0-9a-fA-F]{4})/g</span><span class="p">,</span> <span class="s1">&#39;@&#39;</span><span class="p">).</span>
</span><span class='line'><span class="nx">replace</span><span class="p">(</span><span class="sr">/&quot;[^&quot;\\\n\r]*&quot;|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g</span><span class="p">,</span> <span class="s1">&#39;]&#39;</span><span class="p">).</span>
</span><span class='line'><span class="nx">replace</span><span class="p">(</span><span class="sr">/(?:^|:|,)(?:\s*\[)+/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// In the third stage we use the eval function to compile the text into a</span>
</span><span class='line'>    <span class="c1">// JavaScript structure. The &#39;{&#39; operator is subject to a syntactic ambiguity</span>
</span><span class='line'>    <span class="c1">// in JavaScript: it can begin a block or an object literal. We wrap the text</span>
</span><span class='line'>    <span class="c1">// in parens to eliminate the ambiguity.</span>
</span><span class='line'>    <span class="nx">j</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;(&#39;</span> <span class="o">+</span> <span class="nx">text</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">last_error_json</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// usable by json_last_error()</span>
</span><span class='line'><span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/json/json_decode.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/json/json_decode.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
