<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: array | php.js]]></title>
  <link href="http://kvz.github.com/phpjs//categories/array/atom.xml" rel="self"/>
  <link href="http://kvz.github.com/phpjs//"/>
  <updated>2012-05-17T23:03:58+02:00</updated>
  <id>http://kvz.github.com/phpjs//</id>
  <author>
    <name><![CDATA[phpjs.org]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript usort function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/usort"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/usort</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's usort</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>array/usort.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/usort.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">usort</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">,</span> <span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// %        note 1: This function deviates from PHP in returning a copy of the array instead</span>
</span><span class='line'><span class="c1">// %        note 1: of acting by reference and returning true; this was necessary because</span>
</span><span class='line'><span class="c1">// %        note 1: IE does not allow deleting and re-adding of properties without caching</span>
</span><span class='line'><span class="c1">// %        note 1: of property position; you can set the ini of &quot;phpjs.strictForIn&quot; to true to</span>
</span><span class='line'><span class="c1">// %        note 1: get the PHP behavior, but use this only if you are in an environment</span>
</span><span class='line'><span class="c1">// %        note 1: such as Firefox extensions where for-in iteration order is fixed and true</span>
</span><span class='line'><span class="c1">// %        note 1: property deletion is supported. Note that we intend to implement the PHP</span>
</span><span class='line'><span class="c1">// %        note 1: behavior by default if IE ever does allow it; only gives shallow copy since</span>
</span><span class='line'><span class="c1">// %        note 1: is by reference in PHP anyways</span>
</span><span class='line'><span class="c1">// *     example 1: stuff = {d: &#39;3&#39;, a: &#39;1&#39;, b: &#39;11&#39;, c: &#39;4&#39;};</span>
</span><span class='line'><span class="c1">// *     example 1: stuff = usort(stuff, function (a, b) {return(a-b);});</span>
</span><span class='line'><span class="c1">// *     results 1: stuff = {0: &#39;1&#39;, 1: &#39;3&#39;, 2: &#39;4&#39;, 3: &#39;11&#39;};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">valArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">strictForIn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">populateArr</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">sorter</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">sorter</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="c1">// END REDUNDANT</span>
</span><span class='line'><span class="nx">strictForIn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">!==</span> <span class="s1">&#39;off&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">populateArr</span> <span class="o">=</span> <span class="nx">strictForIn</span> <span class="o">?</span> <span class="nx">inputArr</span> <span class="o">:</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">inputArr</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Get key and value arrays</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">valArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">strictForIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">valArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">sorter</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">valArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Repopulate the old array</span>
</span><span class='line'>    <span class="nx">populateArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">valArr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">strictForIn</span> <span class="o">||</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/usort.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/usort.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript uksort function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/uksort"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/uksort</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's uksort</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>array/uksort.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/uksort.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">uksort</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">,</span> <span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// %          note 1: The examples are correct, this is a new way</span>
</span><span class='line'><span class="c1">// %        note 2: This function deviates from PHP in returning a copy of the array instead</span>
</span><span class='line'><span class="c1">// %        note 2: of acting by reference and returning true; this was necessary because</span>
</span><span class='line'><span class="c1">// %        note 2: IE does not allow deleting and re-adding of properties without caching</span>
</span><span class='line'><span class="c1">// %        note 2: of property position; you can set the ini of &quot;phpjs.strictForIn&quot; to true to</span>
</span><span class='line'><span class="c1">// %        note 2: get the PHP behavior, but use this only if you are in an environment</span>
</span><span class='line'><span class="c1">// %        note 2: such as Firefox extensions where for-in iteration order is fixed and true</span>
</span><span class='line'><span class="c1">// %        note 2: property deletion is supported. Note that we intend to implement the PHP</span>
</span><span class='line'><span class="c1">// %        note 2: behavior by default if IE ever does allow it; only gives shallow copy since</span>
</span><span class='line'><span class="c1">// %        note 2: is by reference in PHP anyways</span>
</span><span class='line'><span class="c1">// *     example 1: data = {d: &#39;lemon&#39;, a: &#39;orange&#39;, b: &#39;banana&#39;, c: &#39;apple&#39;};</span>
</span><span class='line'><span class="c1">// *     example 1: data = uksort(data, function (key1, key2){ return (key1 == key2 ? 0 : (key1 &amp;gt; key2 ? 1 : -1)); });</span>
</span><span class='line'><span class="c1">// *     results 1: data == {a: &#39;orange&#39;, b: &#39;banana&#39;, c: &#39;apple&#39;, d: &#39;lemon&#39;}</span>
</span><span class='line'><span class="c1">// *     returns 1: true</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">tmp_arr</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>    <span class="nx">keys</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">strictForIn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">populateArr</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">sorter</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">sorter</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Make a list of key names</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">inputArr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Sort key names</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">keys</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">sorter</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">keys</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="c1">// END REDUNDANT</span>
</span><span class='line'><span class="nx">strictForIn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">!==</span> <span class="s1">&#39;off&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">populateArr</span> <span class="o">=</span> <span class="nx">strictForIn</span> <span class="o">?</span> <span class="nx">inputArr</span> <span class="o">:</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Rebuild array with sorted key names</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">k</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">strictForIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">delete</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">tmp_arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">tmp_arr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">populateArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">strictForIn</span> <span class="o">||</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/uksort.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/uksort.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript uasort function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/uasort"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/uasort</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's uasort</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>array/uasort.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/uasort.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">uasort</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">,</span> <span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Theriault</span>
</span><span class='line'><span class="c1">// %        note 1: This function deviates from PHP in returning a copy of the array instead</span>
</span><span class='line'><span class="c1">// %        note 1: of acting by reference and returning true; this was necessary because</span>
</span><span class='line'><span class="c1">// %        note 1: IE does not allow deleting and re-adding of properties without caching</span>
</span><span class='line'><span class="c1">// %        note 1: of property position; you can set the ini of &quot;phpjs.strictForIn&quot; to true to</span>
</span><span class='line'><span class="c1">// %        note 1: get the PHP behavior, but use this only if you are in an environment</span>
</span><span class='line'><span class="c1">// %        note 1: such as Firefox extensions where for-in iteration order is fixed and true</span>
</span><span class='line'><span class="c1">// %        note 1: property deletion is supported. Note that we intend to implement the PHP</span>
</span><span class='line'><span class="c1">// %        note 1: behavior by default if IE ever does allow it; only gives shallow copy since</span>
</span><span class='line'><span class="c1">// %        note 1: is by reference in PHP anyways</span>
</span><span class='line'><span class="c1">// *     example 1: fruits = {d: &#39;lemon&#39;, a: &#39;orange&#39;, b: &#39;banana&#39;, c: &#39;apple&#39;};</span>
</span><span class='line'><span class="c1">// *     example 1: fruits = uasort(fruits, function (a, b) { if (a &amp;gt; b) {return 1;}if (a &amp;lt; b) {return -1;} return 0;});</span>
</span><span class='line'><span class="c1">// *     results 1: fruits == {c: &#39;apple&#39;, b: &#39;banana&#39;, d: &#39;lemon&#39;, a: &#39;orange&#39;}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">valArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">tempKeyVal</span><span class="p">,</span> <span class="nx">tempValue</span><span class="p">,</span> <span class="nx">ret</span><span class="p">,</span> <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">strictForIn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">populateArr</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">sorter</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">sorter</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="c1">// END REDUNDANT</span>
</span><span class='line'><span class="nx">strictForIn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">!==</span> <span class="s1">&#39;off&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">populateArr</span> <span class="o">=</span> <span class="nx">strictForIn</span> <span class="o">?</span> <span class="nx">inputArr</span> <span class="o">:</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">inputArr</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Get key and value arrays</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">valArr</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">k</span><span class="p">,</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">]]);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">strictForIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">valArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">sorter</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">valArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Repopulate the old array</span>
</span><span class='line'>    <span class="nx">populateArr</span><span class="p">[</span><span class="nx">valArr</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">valArr</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">strictForIn</span> <span class="o">||</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/uasort.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/uasort.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript sort function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/sort"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/sort</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's sort</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>array/sort.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/sort.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">sort</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">,</span> <span class="nx">sort_flags</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'><span class="c1">// +    revised by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'><span class="c1">// %        note 1: SORT_STRING (as well as natsort and natcasesort) might also be</span>
</span><span class='line'><span class="c1">// %        note 1: integrated into all of these functions by adapting the code at</span>
</span><span class='line'><span class="c1">// %        note 1: http://sourcefrog.net/projects/natsort/natcompare.js</span>
</span><span class='line'><span class="c1">// %        note 2: This function deviates from PHP in returning a copy of the array instead</span>
</span><span class='line'><span class="c1">// %        note 2: of acting by reference and returning true; this was necessary because</span>
</span><span class='line'><span class="c1">// %        note 2: IE does not allow deleting and re-adding of properties without caching</span>
</span><span class='line'><span class="c1">// %        note 2: of property position; you can set the ini of &quot;phpjs.strictForIn&quot; to true to</span>
</span><span class='line'><span class="c1">// %        note 2: get the PHP behavior, but use this only if you are in an environment</span>
</span><span class='line'><span class="c1">// %        note 2: such as Firefox extensions where for-in iteration order is fixed and true</span>
</span><span class='line'><span class="c1">// %        note 2: property deletion is supported. Note that we intend to implement the PHP</span>
</span><span class='line'><span class="c1">// %        note 2: behavior by default if IE ever does allow it; only gives shallow copy since</span>
</span><span class='line'><span class="c1">// %        note 2: is by reference in PHP anyways</span>
</span><span class='line'><span class="c1">// %        note 3: Since JS objects&#39; keys are always strings, and (the</span>
</span><span class='line'><span class="c1">// %        note 3: default) SORT_REGULAR flag distinguishes by key type,</span>
</span><span class='line'><span class="c1">// %        note 3: if the content is a numeric string, we treat the</span>
</span><span class='line'><span class="c1">// %        note 3: &quot;original type&quot; as numeric.</span>
</span><span class='line'><span class="c1">// -    depends on: i18n_loc_get_default</span>
</span><span class='line'><span class="c1">// *     example 1: sort([&#39;Kevin&#39;, &#39;van&#39;, &#39;Zonneveld&#39;]);</span>
</span><span class='line'><span class="c1">// *     returns 1: [&#39;Kevin&#39;, &#39;Zonneveld&#39;, &#39;van&#39;]</span>
</span><span class='line'><span class="c1">// *     example 2: ini_set(&#39;phpjs.strictForIn&#39;, true);</span>
</span><span class='line'><span class="c1">// *     example 2: fruits = {d: &#39;lemon&#39;, a: &#39;orange&#39;, b: &#39;banana&#39;, c: &#39;apple&#39;};</span>
</span><span class='line'><span class="c1">// *     example 2: sort(fruits);</span>
</span><span class='line'><span class="c1">// *     results 2: fruits == {0: &#39;apple&#39;, 1: &#39;banana&#39;, 2: &#39;lemon&#39;, 3: &#39;orange&#39;}</span>
</span><span class='line'><span class="c1">// *     returns 2: true</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">valArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">keyArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>    <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">strictForIn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">populateArr</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'><span class="k">switch</span> <span class="p">(</span><span class="nx">sort_flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="k">case</span> <span class="s1">&#39;SORT_STRING&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// compare items as strings</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">that</span><span class="p">.</span><span class="nx">strnatcmp</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="s1">&#39;SORT_LOCALE_STRING&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// compare items as strings, based on the current locale (set with  i18n_loc_set_default() as of PHP6)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">loc</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">i18n_loc_get_default</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">i18nLocales</span><span class="p">[</span><span class="nx">loc</span><span class="p">].</span><span class="nx">sorting</span><span class="p">;</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="s1">&#39;SORT_NUMERIC&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// compare items numerically</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="k">case</span> <span class="s1">&#39;SORT_REGULAR&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="c1">// compare items normally (don&#39;t change types)</span>
</span><span class='line'><span class="k">default</span><span class="o">:</span>
</span><span class='line'>    <span class="nx">sorter</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">aFloat</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">bFloat</span> <span class="o">=</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span>
</span><span class='line'>            <span class="nx">aNumeric</span> <span class="o">=</span> <span class="nx">aFloat</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="nx">a</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">bNumeric</span> <span class="o">=</span> <span class="nx">bFloat</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span> <span class="o">===</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">aNumeric</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">bNumeric</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">aFloat</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">bFloat</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">aFloat</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">bFloat</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">aNumeric</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="o">!</span><span class="nx">bNumeric</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">aNumeric</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">bNumeric</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">a</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">b</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">a</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">b</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'><span class="c1">// END REDUNDANT</span>
</span><span class='line'><span class="nx">strictForIn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">!==</span> <span class="s1">&#39;off&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">populateArr</span> <span class="o">=</span> <span class="nx">strictForIn</span> <span class="o">?</span> <span class="nx">inputArr</span> <span class="o">:</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">inputArr</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Get key and value arrays</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">valArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">strictForIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">valArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">sorter</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="nx">valArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Repopulate the old array</span>
</span><span class='line'>    <span class="nx">populateArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">valArr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">return</span> <span class="nx">strictForIn</span> <span class="o">||</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/sort.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/sort.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript sizeof function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/sizeof"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/sizeof</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP's sizeof</p>

<!-- more -->


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>array/sizeof.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/sizeof.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">sizeof</span> <span class="p">(</span><span class="nx">mixed_var</span><span class="p">,</span> <span class="nx">mode</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'><span class="c1">// +   original by: Philip Peterson</span>
</span><span class='line'><span class="c1">// -    depends on: count</span>
</span><span class='line'><span class="c1">// *     example 1: sizeof([[0,0],[0,-4]], &#39;COUNT_RECURSIVE&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 1: 6</span>
</span><span class='line'><span class="c1">// *     example 2: sizeof({&#39;one&#39; : [1,2,3,4,5]}, &#39;COUNT_RECURSIVE&#39;);</span>
</span><span class='line'><span class="c1">// *     returns 2: 6</span>
</span><span class='line'><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="p">(</span><span class="nx">mixed_var</span><span class="p">,</span> <span class="nx">mode</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/sizeof.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/sizeof.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
