<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[php.js]]></title>
  <link href="http://kvz.github.com/phpjs//atom.xml" rel="self"/>
  <link href="http://kvz.github.com/phpjs//"/>
  <updated>2012-05-17T23:03:58+02:00</updated>
  <id>http://kvz.github.com/phpjs//</id>
  <author>
    <name><![CDATA[phpjs.org]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript xdiff_string_patch function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/xdiff_string_patch"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/xdiff_string_patch</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s xdiff_string_patch</p>

<!-- more -->




<figure class='code'><figcaption><span>xdiff/xdiff_string_patch.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/xdiff/xdiff_string_patch.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">xdiff_string_patch</span> <span class="p">(</span><span class="nx">originalStr</span><span class="p">,</span> <span class="nx">patch</span><span class="p">,</span> <span class="nx">flags</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Steven Levithan (stevenlevithan.com)</span>
</span><span class='line'>    <span class="c1">// %        note 1: The XDIFF_PATCH_IGNORESPACE flag and the error argument are not currently supported</span>
</span><span class='line'>    <span class="c1">// %        note 2: This has not been widely tested</span>
</span><span class='line'>    <span class="c1">// *     example 1: xdiff_string_patch(&#39;&#39;, &#39;@@ -0,0 +1,1 @@\n+Hello world!&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Hello world!&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// First two functions were adapted from Steven Levithan, also under an MIT license</span>
</span><span class='line'>    <span class="c1">// Adapted from XRegExp 1.5.0</span>
</span><span class='line'>    <span class="c1">// (c) 2007-2010 Steven Levithan</span>
</span><span class='line'>    <span class="c1">// MIT License</span>
</span><span class='line'>    <span class="c1">// &lt;http://xregexp.com&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">getNativeFlags</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">regex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">global</span> <span class="o">?</span> <span class="s2">&quot;g&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">ignoreCase</span> <span class="o">?</span> <span class="s2">&quot;i&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">multiline</span> <span class="o">?</span> <span class="s2">&quot;m&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">extended</span> <span class="o">?</span> <span class="s2">&quot;x&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="c1">// Proposed for ES4; included in AS3</span>
</span><span class='line'>        <span class="p">(</span><span class="nx">regex</span><span class="p">.</span><span class="nx">sticky</span> <span class="o">?</span> <span class="s2">&quot;y&quot;</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>        <span class="nx">cbSplit</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">s</span> <span class="cm">/* separator */</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// If separator `s` is not a regex, use the native `split`</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">s</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// Had problems to get it to work here using prototype test</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">split</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>                <span class="nx">lastLastIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">match</span><span class="p">,</span> <span class="nx">lastLength</span><span class="p">,</span> <span class="nx">limit</span> <span class="o">=</span> <span class="kc">Infinity</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// This is required if not `s.global`, and it avoids needing to set `s.lastIndex` to zero</span>
</span><span class='line'>            <span class="c1">// and restore it to its original value when we&#39;re done using the regex</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">_xregexp</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">source</span><span class="p">,</span> <span class="nx">getNativeFlags</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;g&#39;</span><span class="p">);</span> <span class="c1">// Brett paring down</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">s</span><span class="p">.</span><span class="nx">_xregexp</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">source</span><span class="o">:</span> <span class="nx">x</span><span class="p">.</span><span class="nx">source</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">captureNames</span><span class="o">:</span> <span class="nx">x</span><span class="p">.</span><span class="nx">captureNames</span> <span class="o">?</span> <span class="nx">x</span><span class="p">.</span><span class="nx">captureNames</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="p">((</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">str</span><span class="p">)))</span> <span class="p">{</span> <span class="c1">// Run the altered `exec` (required for `lastIndex` fix, etc.)</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">&gt;</span> <span class="nx">lastLastIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">lastLastIndex</span><span class="p">,</span> <span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">match</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">match</span><span class="p">.</span><span class="nx">index</span> <span class="o">&lt;</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">output</span><span class="p">,</span> <span class="nx">match</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nx">lastLength</span> <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">lastLastIndex</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">output</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="nx">limit</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span> <span class="o">===</span> <span class="nx">match</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">s</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">lastLastIndex</span> <span class="o">===</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">lastLength</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">output</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">lastLastIndex</span><span class="p">));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">output</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">limit</span> <span class="o">?</span> <span class="nx">output</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span> <span class="o">:</span> <span class="nx">output</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ll</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ranges</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">lastLinePos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">firstChar</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">rangeExp</span> <span class="o">=</span> <span class="sr">/^@@\s+-(\d+),(\d+)\s+\+(\d+),(\d+)\s+@@$/</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lineBreaks</span> <span class="o">=</span> <span class="sr">/\r?\n/</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lines</span> <span class="o">=</span> <span class="nx">cbSplit</span><span class="p">(</span><span class="nx">patch</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\r?\n)+$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="nx">lineBreaks</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">origLines</span> <span class="o">=</span> <span class="nx">cbSplit</span><span class="p">(</span><span class="nx">originalStr</span><span class="p">,</span> <span class="nx">lineBreaks</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">newStrArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">linePos</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">errors</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// Both string &amp; integer (constant) input is allowed</span>
</span><span class='line'>        <span class="nx">optTemp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">OPTS</span> <span class="o">=</span> <span class="p">{</span> <span class="c1">// Unsure of actual PHP values, so better to rely on string</span>
</span><span class='line'>            <span class="s1">&#39;XDIFF_PATCH_NORMAL&#39;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;XDIFF_PATCH_REVERSE&#39;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;XDIFF_PATCH_IGNORESPACE&#39;</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Input defaulting &amp; sanitation</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">originalStr</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span> <span class="o">||</span> <span class="o">!</span><span class="nx">patch</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">flags</span> <span class="o">=</span> <span class="s1">&#39;XDIFF_PATCH_NORMAL&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">flags</span> <span class="o">!==</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Allow for a single string or an array of string flags</span>
</span><span class='line'>        <span class="nx">flags</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">flags</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">flags</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Resolve string input to bitwise e.g. &#39;XDIFF_PATCH_NORMAL&#39; becomes 1</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">OPTS</span><span class="p">[</span><span class="nx">flags</span><span class="p">[</span><span class="nx">i</span><span class="p">]])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">optTemp</span> <span class="o">=</span> <span class="nx">optTemp</span> <span class="o">|</span> <span class="nx">OPTS</span><span class="p">[</span><span class="nx">flags</span><span class="p">[</span><span class="nx">i</span><span class="p">]];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">flags</span> <span class="o">=</span> <span class="nx">optTemp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">flags</span> <span class="o">&amp;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">XDIFF_PATCH_NORMAL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ll</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ll</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ranges</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">match</span><span class="p">(</span><span class="nx">rangeExp</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">ranges</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">lastLinePos</span> <span class="o">=</span> <span class="nx">linePos</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">linePos</span> <span class="o">=</span> <span class="nx">ranges</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="nx">lastLinePos</span> <span class="o">&lt;</span> <span class="nx">linePos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">lastLinePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">rangeExp</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">firstChar</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">switch</span> <span class="p">(</span><span class="nx">firstChar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="s1">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>                        <span class="o">++</span><span class="nx">linePos</span><span class="p">;</span> <span class="c1">// Skip including that line</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="s1">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>                        <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="s1">&#39; &#39;</span><span class="o">:</span>
</span><span class='line'>                        <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">linePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">throw</span> <span class="s1">&#39;Unrecognized initial character in unidiff line&#39;</span><span class="p">;</span> <span class="c1">// Reconcile with returning errrors arg?</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">flags</span> <span class="o">&amp;</span> <span class="nx">OPTS</span><span class="p">.</span><span class="nx">XDIFF_PATCH_REVERSE</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Only differs from above by a few lines</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ll</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ll</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ranges</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">match</span><span class="p">(</span><span class="nx">rangeExp</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">ranges</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">lastLinePos</span> <span class="o">=</span> <span class="nx">linePos</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">linePos</span> <span class="o">=</span> <span class="nx">ranges</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="nx">lastLinePos</span> <span class="o">&lt;</span> <span class="nx">linePos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">lastLinePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">rangeExp</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span> <span class="o">==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">firstChar</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">switch</span> <span class="p">(</span><span class="nx">firstChar</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="s1">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>                        <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="s1">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>                        <span class="o">++</span><span class="nx">linePos</span><span class="p">;</span> <span class="c1">// Skip including that line</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="s1">&#39; &#39;</span><span class="o">:</span>
</span><span class='line'>                        <span class="nx">newStrArr</span><span class="p">[</span><span class="nx">newStrArr</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">origLines</span><span class="p">[</span><span class="nx">linePos</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>                        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>                        <span class="k">throw</span> <span class="s1">&#39;Unrecognized initial character in unidiff line&#39;</span><span class="p">;</span> <span class="c1">// Reconcile with returning errrors arg?</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">lines</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">i</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">error</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">error</span><span class="p">]</span> <span class="o">=</span> <span class="nx">errors</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">newStrArr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/xdiff/xdiff_string_patch.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/xdiff/xdiff_string_patch.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript xdiff_string_diff function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/xdiff_string_diff"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/xdiff_string_diff</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s xdiff_string_diff</p>

<!-- more -->




<figure class='code'><figcaption><span>xdiff/xdiff_string_diff.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/xdiff/xdiff_string_diff.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
<span class='line-number'>403</span>
<span class='line-number'>404</span>
<span class='line-number'>405</span>
<span class='line-number'>406</span>
<span class='line-number'>407</span>
<span class='line-number'>408</span>
<span class='line-number'>409</span>
<span class='line-number'>410</span>
<span class='line-number'>411</span>
<span class='line-number'>412</span>
<span class='line-number'>413</span>
<span class='line-number'>414</span>
<span class='line-number'>415</span>
<span class='line-number'>416</span>
<span class='line-number'>417</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">xdiff_string_diff</span> <span class="p">(</span><span class="nx">old_data</span><span class="p">,</span> <span class="nx">new_data</span><span class="p">,</span> <span class="nx">context_lines</span><span class="p">,</span> <span class="nx">minimal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   based on: Imgen Tata (http://www.myipdf.com/)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Imgen Tata (http://www.myipdf.com/)</span>
</span><span class='line'>    <span class="c1">// %        note 1: The minimal argument is not currently supported</span>
</span><span class='line'>    <span class="c1">// *     example 1: xdiff_string_diff(&#39;&#39;, &#39;Hello world!&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;@@ -0,0 +1,1 @@\n+Hello world!&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (This code was done by Imgen Tata; I have only reformatted for use in php.js)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// See http://en.wikipedia.org/wiki/Diff#Unified_format</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ori_hunk_start</span><span class="p">,</span> <span class="nx">new_hunk_start</span><span class="p">,</span> <span class="nx">ori_hunk_end</span><span class="p">,</span> <span class="nx">new_hunk_end</span><span class="p">,</span> <span class="nx">ori_hunk_line_no</span><span class="p">,</span> <span class="nx">new_hunk_line_no</span><span class="p">,</span> <span class="nx">ori_hunk_size</span><span class="p">,</span> <span class="nx">new_hunk_size</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// Potential configuration</span>
</span><span class='line'>        <span class="nx">MAX_CONTEXT_LINES</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">.</span><span class="nx">POSITIVE_INFINITY</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">MIN_CONTEXT_LINES</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">DEFAULT_CONTEXT_LINES</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="nx">HEADER_PREFIX</span> <span class="o">=</span> <span class="s1">&#39;@@ &#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">HEADER_SUFFIX</span> <span class="o">=</span> <span class="s1">&#39; @@&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ORIGINAL_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">NEW_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">RANGE_SEPARATOR</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">CONTEXT_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">DELETION_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;-&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ADDITION_INDICATOR</span> <span class="o">=</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ori_lines</span><span class="p">,</span> <span class="nx">new_lines</span><span class="p">,</span> <span class="nx">NEW_LINE</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="p">,</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">        *Trims string</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="nx">trim</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">text</span> <span class="o">!=</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;String parameter required&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(^\s*)|(\s*$)/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">        *Verifies type of arguments</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="nx">verify_type</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">args_len</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">basic_types</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;number&#39;</span><span class="p">,</span> <span class="s1">&#39;boolean&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="s1">&#39;function&#39;</span><span class="p">,</span> <span class="s1">&#39;object&#39;</span><span class="p">,</span> <span class="s1">&#39;undefined&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">basic_type</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">type_of_type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">args_len</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">type</span> <span class="o">=</span> <span class="nx">trim</span><span class="p">(</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">basic_types</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">basic_type</span> <span class="o">=</span> <span class="nx">basic_types</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">basic_type</span> <span class="o">==</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type&#39;</span><span class="p">);</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Not basic type. we need to use instanceof operator</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nx">type</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type&#39;</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">        *Checks if the specified array contains an element with specified value</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="nx">has_value</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">array</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">verify_type</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">array</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">        *Checks the type of arguments</span>
</span><span class='line'><span class="cm">        *@param {String | Function} type Specifies the desired type</span>
</span><span class='line'><span class="cm">        *@return {Boolean} Return true if all arguments after the type argument are of specified type. Else false</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="nx">are_type_of</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">args_len</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>                <span class="nx">basic_types</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;number&#39;</span><span class="p">,</span> <span class="s1">&#39;boolean&#39;</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="s1">&#39;function&#39;</span><span class="p">,</span> <span class="s1">&#39;object&#39;</span><span class="p">,</span> <span class="s1">&#39;undefined&#39;</span><span class="p">],</span>
</span><span class='line'>                <span class="nx">basic_type</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">type_of_type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;string&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">type_of_type</span> <span class="o">!=</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">args_len</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Too few arguments&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">type_of_type</span> <span class="o">==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">type</span> <span class="o">=</span> <span class="nx">trim</span><span class="p">(</span><span class="nx">type</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">basic_types</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">basic_type</span> <span class="o">=</span> <span class="nx">basic_types</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">basic_type</span> <span class="o">==</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Bad type parameter&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Not basic type. we need to use instanceof operator</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">args_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nx">type</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">        *Initialize and return an array with specified size and initial value</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="nx">get_initialized_array</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">array_size</span><span class="p">,</span> <span class="nx">init_value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>                <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">verify_type</span><span class="p">(</span><span class="s1">&#39;number&#39;</span><span class="p">,</span> <span class="nx">array_size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">array_size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">init_value</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">array</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">        *Splits text into lines and return as a string array</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="nx">split_into_lines</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">verify_type</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">text</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">is_empty_array</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">are_type_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">        * Finds longest common sequence between two sequences</span>
</span><span class='line'><span class="cm">        *See http://wordaligned.org/articles/longest-common-subsequence</span>
</span><span class='line'><span class="cm">        */</span>
</span><span class='line'>        <span class="nx">find_longest_common_sequence</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">seq1</span><span class="p">,</span> <span class="nx">seq2</span><span class="p">,</span> <span class="nx">seq1_is_in_lcs</span><span class="p">,</span> <span class="nx">seq2_is_in_lcs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">are_type_of</span><span class="p">(</span><span class="nb">Array</span><span class="p">,</span> <span class="nx">seq1</span><span class="p">,</span> <span class="nx">seq2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Array parameters are required&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Deal with edge case</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">is_empty_array</span><span class="p">(</span><span class="nx">seq1</span><span class="p">)</span> <span class="o">||</span> <span class="nx">is_empty_array</span><span class="p">(</span><span class="nx">seq2</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Function to calculate lcs lengths</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">lcs_lens</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">xs</span><span class="p">,</span> <span class="nx">ys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">curr</span> <span class="o">=</span> <span class="nx">get_initialized_array</span><span class="p">(</span><span class="nx">ys</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">prev</span><span class="p">;</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">prev</span> <span class="o">=</span> <span class="nx">curr</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">xs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="nx">ys</span><span class="p">[</span><span class="nx">j</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">curr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">prev</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">curr</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">curr</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">prev</span><span class="p">[</span><span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">return</span> <span class="nx">curr</span><span class="p">;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>                <span class="c1">// Function to find lcs and fill in the array to indicate the optimal longest common sequence</span>
</span><span class='line'>                <span class="nx">find_lcs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">xs</span><span class="p">,</span> <span class="nx">xidx</span><span class="p">,</span> <span class="nx">xs_is_in</span><span class="p">,</span> <span class="nx">ys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">nx</span> <span class="o">=</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">ny</span> <span class="o">=</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">xb</span><span class="p">,</span> <span class="nx">xe</span><span class="p">;</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">ll_b</span><span class="p">,</span> <span class="nx">ll_e</span><span class="p">;</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">pivot</span><span class="p">;</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">max</span><span class="p">;</span>
</span><span class='line'>                    <span class="kd">var</span> <span class="nx">yb</span><span class="p">,</span> <span class="nx">ye</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="nx">nx</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">nx</span> <span class="o">===</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">if</span> <span class="p">(</span><span class="nx">has_value</span><span class="p">(</span><span class="nx">ys</span><span class="p">,</span> <span class="nx">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                            <span class="nx">xs_is_in</span><span class="p">[</span><span class="nx">xidx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>                            <span class="k">return</span> <span class="p">[</span><span class="nx">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>                        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">i</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">nx</span> <span class="o">/</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">xb</span> <span class="o">=</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">xe</span> <span class="o">=</span> <span class="nx">xs</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">ll_b</span> <span class="o">=</span> <span class="nx">lcs_lens</span><span class="p">(</span><span class="nx">xb</span><span class="p">,</span> <span class="nx">ys</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">ll_e</span> <span class="o">=</span> <span class="nx">lcs_lens</span><span class="p">(</span><span class="nx">xe</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">reverse</span><span class="p">(),</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">reverse</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nx">pivot</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                        <span class="nx">max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                        <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;=</span> <span class="nx">ny</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                            <span class="k">if</span> <span class="p">(</span><span class="nx">ll_b</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">ll_e</span><span class="p">[</span><span class="nx">ny</span> <span class="o">-</span> <span class="nx">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="nx">pivot</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>                                <span class="nx">max</span> <span class="o">=</span> <span class="nx">ll_b</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+</span> <span class="nx">ll_e</span><span class="p">[</span><span class="nx">ny</span> <span class="o">-</span> <span class="nx">j</span><span class="p">];</span>
</span><span class='line'>                            <span class="p">}</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                        <span class="nx">yb</span> <span class="o">=</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">);</span>
</span><span class='line'>                        <span class="nx">ye</span> <span class="o">=</span> <span class="nx">ys</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">pivot</span><span class="p">);</span>
</span><span class='line'>                        <span class="k">return</span> <span class="nx">find_lcs</span><span class="p">(</span><span class="nx">xb</span><span class="p">,</span> <span class="nx">xidx</span><span class="p">,</span> <span class="nx">xs_is_in</span><span class="p">,</span> <span class="nx">yb</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">find_lcs</span><span class="p">(</span><span class="nx">xe</span><span class="p">,</span> <span class="nx">xidx</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">xs_is_in</span><span class="p">,</span> <span class="nx">ye</span><span class="p">));</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Fill in seq1_is_in_lcs to find the optimal longest common subsequence of first sequence</span>
</span><span class='line'>            <span class="nx">find_lcs</span><span class="p">(</span><span class="nx">seq1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">seq1_is_in_lcs</span><span class="p">,</span> <span class="nx">seq2</span><span class="p">);</span>
</span><span class='line'>            <span class="c1">// Fill in seq2_is_in_lcs to find the optimal longest common subsequence of second sequence and return the result</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">find_lcs</span><span class="p">(</span><span class="nx">seq2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">seq2_is_in_lcs</span><span class="p">,</span> <span class="nx">seq1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// First, check the parameters</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">are_type_of</span><span class="p">(</span><span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="nx">old_data</span><span class="p">,</span> <span class="nx">new_data</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">old_data</span> <span class="o">==</span> <span class="nx">new_data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">context_lines</span> <span class="o">!=</span> <span class="s1">&#39;number&#39;</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">&gt;</span> <span class="nx">MAX_CONTEXT_LINES</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">&lt;</span> <span class="nx">MIN_CONTEXT_LINES</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">context_lines</span> <span class="o">=</span> <span class="nx">DEFAULT_CONTEXT_LINES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ori_lines</span> <span class="o">=</span> <span class="nx">split_into_lines</span><span class="p">(</span><span class="nx">old_data</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">new_lines</span> <span class="o">=</span> <span class="nx">split_into_lines</span><span class="p">(</span><span class="nx">new_data</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ori_len</span> <span class="o">=</span> <span class="nx">ori_lines</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">new_len</span> <span class="o">=</span> <span class="nx">new_lines</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ori_is_in_lcs</span> <span class="o">=</span> <span class="nx">get_initialized_array</span><span class="p">(</span><span class="nx">ori_len</span><span class="p">,</span> <span class="kc">false</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">new_is_in_lcs</span> <span class="o">=</span> <span class="nx">get_initialized_array</span><span class="p">(</span><span class="nx">new_len</span><span class="p">,</span> <span class="kc">false</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">lcs_len</span> <span class="o">=</span> <span class="nx">find_longest_common_sequence</span><span class="p">(</span><span class="nx">ori_lines</span><span class="p">,</span> <span class="nx">new_lines</span><span class="p">,</span> <span class="nx">ori_is_in_lcs</span><span class="p">,</span> <span class="nx">new_is_in_lcs</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">unidiff</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">lcs_len</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// No common sequence</span>
</span><span class='line'>        <span class="nx">unidiff</span> <span class="o">=</span> <span class="nx">HEADER_PREFIX</span> <span class="o">+</span> <span class="nx">ORIGINAL_INDICATOR</span> <span class="o">+</span> <span class="p">(</span><span class="nx">ori_len</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;1&#39;</span> <span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">ori_len</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">NEW_INDICATOR</span> <span class="o">+</span> <span class="p">(</span><span class="nx">new_len</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;1&#39;</span> <span class="o">:</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">new_len</span> <span class="o">+</span> <span class="nx">HEADER_SUFFIX</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ori_len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">NEW_LINE</span> <span class="o">+</span> <span class="nx">DELETION_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_lines</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">new_len</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">NEW_LINE</span> <span class="o">+</span> <span class="nx">ADDITION_INDICATOR</span> <span class="o">+</span> <span class="nx">new_lines</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">unidiff</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">leading_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">trailing_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">actual_leading_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">actual_trailing_context</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Regularize leading context by the context_lines parameter</span>
</span><span class='line'>        <span class="nx">regularize_leading_context</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">context_start_pos</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">context_lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">context_start_pos</span><span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Regularize trailing context by the context_lines parameter</span>
</span><span class='line'>        <span class="nx">regularize_trailing_context</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">context_lines</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="p">[];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">context_lines</span><span class="p">,</span> <span class="nx">context</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Skip common lines in the beginning</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ori_len</span> <span class="o">&amp;&amp;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">leading_context</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ori_lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">j</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">k</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span> <span class="c1">// The index in the longest common sequence</span>
</span><span class='line'>    <span class="nx">ori_hunk_start</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">new_hunk_start</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">ori_hunk_end</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">new_hunk_end</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ori_len</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">new_len</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ori_len</span> <span class="o">&amp;&amp;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">ori_hunk_end</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">new_len</span> <span class="o">&amp;&amp;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">new_hunk_end</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Find the trailing context</span>
</span><span class='line'>        <span class="nx">trailing_context</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ori_len</span> <span class="o">&amp;&amp;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">new_len</span> <span class="o">&amp;&amp;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">trailing_context</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ori_lines</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>            <span class="nx">k</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">j</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">k</span> <span class="o">&gt;=</span> <span class="nx">lcs_len</span> <span class="o">||</span> <span class="c1">// No more in longest common lines</span>
</span><span class='line'>        <span class="nx">trailing_context</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">context_lines</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Context break found</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">trailing_context</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="nx">context_lines</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// It must be last block of common lines but not a context break</span>
</span><span class='line'>                <span class="nx">trailing_context</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Force break out</span>
</span><span class='line'>                <span class="nx">i</span> <span class="o">=</span> <span class="nx">ori_len</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">j</span> <span class="o">=</span> <span class="nx">new_len</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Update hunk ends to force output to the end</span>
</span><span class='line'>                <span class="nx">ori_hunk_end</span> <span class="o">=</span> <span class="nx">ori_len</span><span class="p">;</span>
</span><span class='line'>                <span class="nx">new_hunk_end</span> <span class="o">=</span> <span class="nx">new_len</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Output the diff hunk</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Trim the leading and trailing context block</span>
</span><span class='line'>            <span class="nx">actual_leading_context</span> <span class="o">=</span> <span class="nx">regularize_leading_context</span><span class="p">(</span><span class="nx">leading_context</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">actual_trailing_context</span> <span class="o">=</span> <span class="nx">regularize_trailing_context</span><span class="p">(</span><span class="nx">trailing_context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">ori_hunk_start</span> <span class="o">-=</span> <span class="nx">actual_leading_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">new_hunk_start</span> <span class="o">-=</span> <span class="nx">actual_leading_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">ori_hunk_end</span> <span class="o">+=</span> <span class="nx">actual_trailing_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">new_hunk_end</span> <span class="o">+=</span> <span class="nx">actual_trailing_context</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">ori_hunk_line_no</span> <span class="o">=</span> <span class="nx">ori_hunk_start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">new_hunk_line_no</span> <span class="o">=</span> <span class="nx">new_hunk_start</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">ori_hunk_size</span> <span class="o">=</span> <span class="nx">ori_hunk_end</span> <span class="o">-</span> <span class="nx">ori_hunk_start</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">new_hunk_size</span> <span class="o">=</span> <span class="nx">new_hunk_end</span> <span class="o">-</span> <span class="nx">new_hunk_start</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Build header</span>
</span><span class='line'>            <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">HEADER_PREFIX</span> <span class="o">+</span> <span class="nx">ORIGINAL_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_hunk_line_no</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">ori_hunk_size</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">NEW_INDICATOR</span> <span class="o">+</span> <span class="nx">new_hunk_line_no</span> <span class="o">+</span> <span class="nx">RANGE_SEPARATOR</span> <span class="o">+</span> <span class="nx">new_hunk_size</span> <span class="o">+</span> <span class="nx">HEADER_SUFFIX</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Build the diff hunk content</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="nx">ori_hunk_start</span> <span class="o">&lt;</span> <span class="nx">ori_hunk_end</span> <span class="o">||</span> <span class="nx">new_hunk_start</span> <span class="o">&lt;</span> <span class="nx">new_hunk_end</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">ori_hunk_start</span> <span class="o">&lt;</span> <span class="nx">ori_hunk_end</span> <span class="o">&amp;&amp;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">new_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The context line</span>
</span><span class='line'>                    <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">CONTEXT_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_lines</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">ori_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">new_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">ori_hunk_start</span> <span class="o">&lt;</span> <span class="nx">ori_hunk_end</span> <span class="o">&amp;&amp;</span> <span class="nx">ori_is_in_lcs</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The deletion line</span>
</span><span class='line'>                    <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">DELETION_INDICATOR</span> <span class="o">+</span> <span class="nx">ori_lines</span><span class="p">[</span><span class="nx">ori_hunk_start</span><span class="p">]</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">ori_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">new_hunk_start</span> <span class="o">&lt;</span> <span class="nx">new_hunk_end</span> <span class="o">&amp;&amp;</span> <span class="nx">new_is_in_lcs</span><span class="p">[</span><span class="nx">new_hunk_start</span><span class="p">]</span> <span class="o">===</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// The additional line</span>
</span><span class='line'>                    <span class="nx">unidiff</span> <span class="o">+=</span> <span class="nx">ADDITION_INDICATOR</span> <span class="o">+</span> <span class="nx">new_lines</span><span class="p">[</span><span class="nx">new_hunk_start</span><span class="p">]</span> <span class="o">+</span> <span class="nx">NEW_LINE</span><span class="p">;</span>
</span><span class='line'>                    <span class="nx">new_hunk_start</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Update hunk position and leading context</span>
</span><span class='line'>            <span class="nx">ori_hunk_start</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">new_hunk_start</span> <span class="o">=</span> <span class="nx">j</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">leading_context</span> <span class="o">=</span> <span class="nx">trailing_context</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Trim the trailing new line if it exists</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">unidiff</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">unidiff</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">unidiff</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">===</span> <span class="nx">NEW_LINE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">unidiff</span> <span class="o">=</span> <span class="nx">unidiff</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">unidiff</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/xdiff/xdiff_string_diff.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/xdiff/xdiff_string_diff.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript wordwrap function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/wordwrap"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/wordwrap</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s wordwrap</p>

<!-- more -->




<figure class='code'><figcaption><span>strings/wordwrap.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/wordwrap.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">wordwrap</span> <span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">int_width</span><span class="p">,</span> <span class="nx">str_break</span><span class="p">,</span> <span class="nx">cut</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Nick Callen</span>
</span><span class='line'>    <span class="c1">// +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Sakimori</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Michael Grier</span>
</span><span class='line'>    <span class="c1">// *     example 1: wordwrap(&#39;Kevin van Zonneveld&#39;, 6, &#39;|&#39;, true);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Kevin |van |Zonnev|eld&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 2: wordwrap(&#39;The quick brown fox jumped over the lazy dog.&#39;, 20, &#39;&lt;br /&gt;\n&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 2: &#39;The quick brown fox &lt;br /&gt;\njumped over the lazy&lt;br /&gt;\n dog.&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 3: wordwrap(&#39;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 3: &#39;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod \ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim \nveniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea \ncommodo consequat.&#39;</span>
</span><span class='line'>    <span class="c1">// PHP Defaults</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="p">((</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">?</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">:</span> <span class="mi">75</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">((</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">3</span><span class="p">)</span> <span class="o">?</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">:</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="p">((</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="mi">4</span><span class="p">)</span> <span class="o">?</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">:</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">s</span><span class="p">,</span> <span class="nx">r</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">m</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="p">(</span><span class="nx">r</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\r\n|\n|\r/</span><span class="p">)).</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">s</span> <span class="o">=</span> <span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">m</span><span class="p">;</span> <span class="nx">r</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">j</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">j</span><span class="p">)).</span><span class="nx">length</span> <span class="o">?</span> <span class="nx">b</span> <span class="o">:</span> <span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">j</span> <span class="o">=</span> <span class="nx">c</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\S*(\s)?$/</span><span class="p">))[</span><span class="mi">1</span><span class="p">]</span> <span class="o">?</span> <span class="nx">m</span> <span class="o">:</span> <span class="nx">j</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span> <span class="o">||</span> <span class="nx">c</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nx">m</span> <span class="o">||</span> <span class="nx">j</span><span class="p">.</span><span class="nx">input</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">m</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^\S*/</span><span class="p">)).</span><span class="nx">input</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/wordwrap.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/wordwrap.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript vsprintf function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/vsprintf"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/vsprintf</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s vsprintf</p>

<!-- more -->




<figure class='code'><figcaption><span>strings/vsprintf.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/vsprintf.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">vsprintf</span> <span class="p">(</span><span class="nx">format</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: ejsanders</span>
</span><span class='line'>    <span class="c1">// -    depends on: sprintf</span>
</span><span class='line'>    <span class="c1">// *     example 1: vsprintf(&#39;%04d-%02d-%02d&#39;, [1988, 8, 1]);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;1988-08-01&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sprintf</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="p">[</span><span class="nx">format</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">args</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/vsprintf.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/vsprintf.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript vprintf function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/vprintf"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/vprintf</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s vprintf</p>

<!-- more -->




<figure class='code'><figcaption><span>strings/vprintf.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/vprintf.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">vprintf</span> <span class="p">(</span><span class="nx">format</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Ash Searle (http://hexmen.com/blog/)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Michael White (http://getsprink.com)</span>
</span><span class='line'>    <span class="c1">// + reimplemented by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// -    depends on: sprintf</span>
</span><span class='line'>    <span class="c1">// *     example 1: printf(&quot;%01.2f&quot;, 123.1);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: 6</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">elmt</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">d</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// .shift() does not work to get first item in bodies</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">HTMLNS</span> <span class="o">=</span> <span class="s1">&#39;http://www.w3.org/1999/xhtml&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">body</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagNameNS</span> <span class="o">?</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagNameNS</span><span class="p">(</span><span class="nx">HTMLNS</span><span class="p">,</span> <span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">?</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagNameNS</span><span class="p">(</span><span class="nx">HTMLNS</span><span class="p">,</span> <span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">.</span><span class="nx">lastChild</span><span class="p">)</span> <span class="o">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">ret</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sprintf</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="p">[</span><span class="nx">format</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">args</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">elmt</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">ret</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">elmt</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">ret</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/vprintf.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/vprintf.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript version_compare function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/version_compare"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/version_compare</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s version_compare</p>

<!-- more -->




<figure class='code'><figcaption><span>info/version_compare.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/info/version_compare.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">version_compare</span> <span class="p">(</span><span class="nx">v1</span><span class="p">,</span> <span class="nx">v2</span><span class="p">,</span> <span class="nx">operator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +      original by: Philippe Jausions (http://pear.php.net/user/jausions)</span>
</span><span class='line'>    <span class="c1">// +      original by: Aidan Lister (http://aidanlister.com/)</span>
</span><span class='line'>    <span class="c1">// + reimplemented by: Kankrelune (http://www.webfaktory.info/)</span>
</span><span class='line'>    <span class="c1">// +      improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +      improved by: Scott Baker</span>
</span><span class='line'>    <span class="c1">// +      improved by: Theriault</span>
</span><span class='line'>    <span class="c1">// *        example 1: version_compare(&#39;8.2.5rc&#39;, &#39;8.2.5a&#39;);</span>
</span><span class='line'>    <span class="c1">// *        returns 1: 1</span>
</span><span class='line'>    <span class="c1">// *        example 2: version_compare(&#39;8.2.50&#39;, &#39;8.2.52&#39;, &#39;&lt;&#39;);</span>
</span><span class='line'>    <span class="c1">// *        returns 2: true</span>
</span><span class='line'>    <span class="c1">// *        example 3: version_compare(&#39;5.3.0-dev&#39;, &#39;5.3.0&#39;);</span>
</span><span class='line'>    <span class="c1">// *        returns 3: -1</span>
</span><span class='line'>    <span class="c1">// *        example 4: version_compare(&#39;4.1.0.52&#39;,&#39;4.01.0.51&#39;);</span>
</span><span class='line'>    <span class="c1">// *        returns 4: 1</span>
</span><span class='line'>    <span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ENV</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ENV</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">// END REDUNDANT</span>
</span><span class='line'>    <span class="c1">// Important: compare must be initialized at 0. </span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">compare</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// vm maps textual PHP versions to negatives so they&#39;re less than 0.</span>
</span><span class='line'>        <span class="c1">// PHP currently defines these as CASE-SENSITIVE. It is important to</span>
</span><span class='line'>        <span class="c1">// leave these as negatives so that they can come before numerical versions</span>
</span><span class='line'>        <span class="c1">// and as if no letters were there to begin with.</span>
</span><span class='line'>        <span class="c1">// (1alpha is &lt; 1 and &lt; 1.1 but &gt; 1dev1)</span>
</span><span class='line'>        <span class="c1">// If a non-numerical value can&#39;t be mapped to this table, it receives</span>
</span><span class='line'>        <span class="c1">// -7 as its value.</span>
</span><span class='line'>        <span class="nx">vm</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;dev&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">6</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;alpha&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;beta&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;RC&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;rc&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;#&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;p&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;pl&#39;</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="c1">// This function will be called to prepare each version argument.</span>
</span><span class='line'>        <span class="c1">// It replaces every _, -, and + with a dot.</span>
</span><span class='line'>        <span class="c1">// It surrounds any nonsequence of numbers/dots with dots.</span>
</span><span class='line'>        <span class="c1">// It replaces sequences of dots with a single dot.</span>
</span><span class='line'>        <span class="c1">//    version_compare(&#39;4..0&#39;, &#39;4.0&#39;) == 0</span>
</span><span class='line'>        <span class="c1">// Important: A string of 0 length needs to be converted into a value</span>
</span><span class='line'>        <span class="c1">// even less than an unexisting value in vm (-7), hence [-8].</span>
</span><span class='line'>        <span class="c1">// It&#39;s also important to not strip spaces because of this.</span>
</span><span class='line'>        <span class="c1">//   version_compare(&#39;&#39;, &#39; &#39;) == 1</span>
</span><span class='line'>        <span class="nx">prepVersion</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">v</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;&#39;</span> <span class="o">+</span> <span class="nx">v</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[_\-+]/g</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">v</span> <span class="o">=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([^.\d]+)/g</span><span class="p">,</span> <span class="s1">&#39;.$1.&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\.{2,}/g</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span> <span class="o">?</span> <span class="p">[</span><span class="o">-</span><span class="mi">8</span><span class="p">]</span> <span class="o">:</span> <span class="nx">v</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">));</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="c1">// This converts a version component to a number.</span>
</span><span class='line'>        <span class="c1">// Empty component becomes 0.</span>
</span><span class='line'>        <span class="c1">// Non-numerical component becomes a negative number.</span>
</span><span class='line'>        <span class="c1">// Numerical component becomes itself as an integer.</span>
</span><span class='line'>        <span class="nx">numVersion</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">!</span><span class="nx">v</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="p">(</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span> <span class="o">?</span> <span class="nx">vm</span><span class="p">[</span><span class="nx">v</span><span class="p">]</span> <span class="o">||</span> <span class="o">-</span><span class="mi">7</span> <span class="o">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="nx">v1</span> <span class="o">=</span> <span class="nx">prepVersion</span><span class="p">(</span><span class="nx">v1</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">v2</span> <span class="o">=</span> <span class="nx">prepVersion</span><span class="p">(</span><span class="nx">v2</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">v1</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">v2</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">x</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">v2</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numVersion</span><span class="p">(</span><span class="nx">v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="nx">v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">numVersion</span><span class="p">(</span><span class="nx">v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nx">v2</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">compare</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">v2</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">compare</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">operator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">compare</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Important: operator is CASE-SENSITIVE.</span>
</span><span class='line'>    <span class="c1">// &quot;No operator&quot; seems to be treated as &quot;&lt;.&quot;</span>
</span><span class='line'>    <span class="c1">// Any other values seem to make the function return null.</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="nx">operator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;gt&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">compare</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;&gt;=&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;ge&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">compare</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;&lt;=&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;le&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">compare</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;==&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;=&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;eq&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">compare</span> <span class="o">===</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;&lt;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;!=&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;ne&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">compare</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>    <span class="k">case</span> <span class="s1">&#39;lt&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="nx">compare</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">default</span><span class="o">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/info/version_compare.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/info/version_compare.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript var_export function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/var_export"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/var_export</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s var_export</p>

<!-- more -->




<figure class='code'><figcaption><span>var/var_export.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/var/var_export.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">var_export</span> <span class="p">(</span><span class="nx">mixed_expression</span><span class="p">,</span> <span class="nx">bool_return</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Philip Peterson</span>
</span><span class='line'>    <span class="c1">// +   improved by: johnrembo</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   input by: Brian Tafoya (http://www.premasolutions.com/)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// -    depends on: echo</span>
</span><span class='line'>    <span class="c1">// *     example 1: var_export(null);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: null</span>
</span><span class='line'>    <span class="c1">// *     example 2: var_export({0: &#39;Kevin&#39;, 1: &#39;van&#39;, 2: &#39;Zonneveld&#39;}, true);</span>
</span><span class='line'>    <span class="c1">// *     returns 2: &quot;array (\n  0 =&gt; &#39;Kevin&#39;,\n  1 =&gt; &#39;van&#39;,\n  2 =&gt; &#39;Zonneveld&#39;\n)&quot;</span>
</span><span class='line'>    <span class="c1">// *     example 3: data = &#39;Kevin&#39;;</span>
</span><span class='line'>    <span class="c1">// *     example 3: var_export(data, true);</span>
</span><span class='line'>    <span class="c1">// *     returns 3: &quot;&#39;Kevin&#39;&quot;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retstr</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">iret</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">x</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">funcParts</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">idtLevel</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>        <span class="c1">// We use the last argument (not part of PHP) to pass in our indentation level</span>
</span><span class='line'>        <span class="nx">innerIndent</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">outerIndent</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">getFuncName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/\W*function\s+([\w\$]+)\s*\(/</span><span class="p">).</span><span class="nx">exec</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;(Anonymous)&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">name</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_makeIndent</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">idtLevel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">idtLevel</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">__getType</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">inp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">match</span><span class="p">,</span> <span class="nx">type</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">inp</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">inp</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">&amp;&amp;</span> <span class="nx">getFuncName</span><span class="p">(</span><span class="nx">inp</span><span class="p">.</span><span class="nx">constructor</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;PHPJS_Resource&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;resource&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;function&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">inp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;null&#39;</span><span class="p">;</span> <span class="c1">// Should this be just null?</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">inp</span><span class="p">.</span><span class="nx">constructor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="s1">&#39;object&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">cons</span> <span class="o">=</span> <span class="nx">inp</span><span class="p">.</span><span class="nx">constructor</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">match</span> <span class="o">=</span> <span class="nx">cons</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/(\w+)\(/</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">cons</span> <span class="o">=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">types</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;boolean&quot;</span><span class="p">,</span> <span class="s2">&quot;number&quot;</span><span class="p">,</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span> <span class="s2">&quot;array&quot;</span><span class="p">];</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">types</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">cons</span> <span class="o">===</span> <span class="nx">types</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">type</span> <span class="o">=</span> <span class="nx">types</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">type</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">__getType</span><span class="p">(</span><span class="nx">mixed_expression</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">retstr</span> <span class="o">=</span> <span class="s2">&quot;NULL&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;array&#39;</span> <span class="o">||</span> <span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">outerIndent</span> <span class="o">=</span> <span class="nx">_makeIndent</span><span class="p">(</span><span class="nx">idtLevel</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">innerIndent</span> <span class="o">=</span> <span class="nx">_makeIndent</span><span class="p">(</span><span class="nx">idtLevel</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">mixed_expression</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">var_export</span><span class="p">(</span><span class="nx">mixed_expression</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">idtLevel</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">value</span> <span class="o">=</span> <span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span> <span class="o">?</span> <span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;/g</span><span class="p">,</span> <span class="s1">&#39;&amp;lt;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&gt;/g</span><span class="p">,</span> <span class="s1">&#39;&amp;gt;&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">x</span><span class="p">[</span><span class="nx">cnt</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nx">innerIndent</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39; =&gt; &#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">__getType</span><span class="p">(</span><span class="nx">mixed_expression</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">===</span> <span class="s1">&#39;array&#39;</span> <span class="o">?</span> <span class="s1">&#39;\n&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nx">iret</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,\n&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">retstr</span> <span class="o">=</span> <span class="nx">outerIndent</span> <span class="o">+</span> <span class="s2">&quot;array (\n&quot;</span> <span class="o">+</span> <span class="nx">iret</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span> <span class="nx">outerIndent</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">funcParts</span> <span class="o">=</span> <span class="nx">mixed_expression</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">match</span><span class="p">(</span><span class="sr">/function .*?\((.*?)\) \{([\s\S]*)\}/</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// For lambda functions, var_export() outputs such as the following:  &#39;\000lambda_1&#39;</span>
</span><span class='line'>        <span class="c1">// Since it will probably not be a common use to expect this (unhelpful) form, we&#39;ll use another PHP-exportable</span>
</span><span class='line'>        <span class="c1">// construct, create_function() (though dollar signs must be on the variables in JavaScript); if using instead</span>
</span><span class='line'>        <span class="c1">// in JavaScript and you are using the namespaced version, note that create_function() will not be available</span>
</span><span class='line'>        <span class="c1">// as a global</span>
</span><span class='line'>        <span class="nx">retstr</span> <span class="o">=</span> <span class="s2">&quot;create_function (&#39;&quot;</span> <span class="o">+</span> <span class="nx">funcParts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&#39;, &#39;&quot;</span> <span class="o">+</span> <span class="nx">funcParts</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">replace</span><span class="p">(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;&#39;&quot;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">),</span> <span class="s2">&quot;\\&#39;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&#39;)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;resource&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">retstr</span> <span class="o">=</span> <span class="s1">&#39;NULL&#39;</span><span class="p">;</span> <span class="c1">// Resources treated as null for var_export</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">retstr</span> <span class="o">=</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">mixed_expression</span><span class="p">)</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">mixed_expression</span> <span class="o">:</span> <span class="s2">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="nx">mixed_expression</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([&quot;&#39;])/g</span><span class="p">,</span> <span class="s2">&quot;\\$1&quot;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\0/g</span><span class="p">,</span> <span class="s2">&quot;\\0&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">bool_return</span> <span class="o">!==</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">retstr</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">retstr</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/var/var_export.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/var/var_export.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript var_dump function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/var_dump"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/var_dump</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s var_dump</p>

<!-- more -->




<figure class='code'><figcaption><span>var/var_dump.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/var/var_dump.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">var_dump</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Zahlii</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// -    depends on: echo</span>
</span><span class='line'>    <span class="c1">// %        note 1: For returning a string, use var_export() with the second argument set to true</span>
</span><span class='line'>    <span class="c1">// *     example 1: var_dump(1);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;int(1)&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">pad_char</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">pad_val</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">lgth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">d</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_getFuncName</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/\W*function\s+([\w\$]+)\s*\(/</span><span class="p">).</span><span class="nx">exec</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s1">&#39;(Anonymous)&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">name</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_repeat_char</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">len</span><span class="p">,</span> <span class="nx">pad_char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">str</span> <span class="o">+=</span> <span class="nx">pad_char</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_getInnerVal</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="nx">thick_pad</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;NULL&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="s1">&#39;boolean&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;bool(&#39;</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;string(&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s1">&#39;) &quot;&#39;</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="s1">&#39;number&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span> <span class="o">==</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">val</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;int(&#39;</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;float(&#39;</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// The remaining are not PHP behavior because these values only exist in this exact form in JavaScript</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">funcLines</span> <span class="o">=</span> <span class="nx">val</span><span class="p">.</span><span class="nx">toString</span><span class="p">().</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fll</span> <span class="o">=</span> <span class="nx">funcLines</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">fll</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">i</span> <span class="o">!==</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span> <span class="nx">thick_pad</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">funcLines</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;Date(&#39;</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">val</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;RegExp(&#39;</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Different than PHP&#39;s DOMElement</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="nx">val</span><span class="p">.</span><span class="nx">nodeType</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">val</span><span class="p">.</span><span class="nx">namespaceURI</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">||</span> <span class="nx">val</span><span class="p">.</span><span class="nx">namespaceURI</span> <span class="o">===</span> <span class="s1">&#39;http://www.w3.org/1999/xhtml&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Undefined namespace could be plain XML, but namespaceURI not widely supported</span>
</span><span class='line'>                    <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;HTMLElement(&quot;&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">+</span> <span class="s1">&#39;&quot;)&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;XML Element(&quot;&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">+</span> <span class="s1">&#39;&quot;)&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;ATTRIBUTE_NODE(&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;TEXT_NODE(&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;CDATA_SECTION_NODE(&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;ENTITY_REFERENCE_NODE&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">6</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;ENTITY_NODE&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">7</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;PROCESSING_INSTRUCTION_NODE(&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeName</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">8</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;COMMENT_NODE(&#39;</span> <span class="o">+</span> <span class="nx">val</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">9</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;DOCUMENT_NODE&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">10</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;DOCUMENT_TYPE_NODE&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">11</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;DOCUMENT_FRAGMENT_NODE&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="mi">12</span><span class="o">:</span>
</span><span class='line'>                <span class="nx">ret</span> <span class="o">=</span> <span class="s1">&#39;NOTATION_NODE&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">ret</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_formatArray</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">cur_depth</span><span class="p">,</span> <span class="nx">pad_val</span><span class="p">,</span> <span class="nx">pad_char</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">someProp</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">cur_depth</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">cur_depth</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">base_pad</span> <span class="o">=</span> <span class="nx">_repeat_char</span><span class="p">(</span><span class="nx">pad_val</span> <span class="o">*</span> <span class="p">(</span><span class="nx">cur_depth</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">pad_char</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">thick_pad</span> <span class="o">=</span> <span class="nx">_repeat_char</span><span class="p">(</span><span class="nx">pad_val</span> <span class="o">*</span> <span class="p">(</span><span class="nx">cur_depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">pad_char</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">obj</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">&amp;&amp;</span> <span class="nx">_getFuncName</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">constructor</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;PHPJS_Resource&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">var_dump</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">lgth</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nx">someProp</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">lgth</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39;array(&#39;</span> <span class="o">+</span> <span class="nx">lgth</span> <span class="o">+</span> <span class="s1">&#39;) {\n&#39;</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">objVal</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">objVal</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">objVal</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="nx">objVal</span> <span class="k">instanceof</span> <span class="nb">Date</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="nx">objVal</span> <span class="k">instanceof</span> <span class="nb">RegExp</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">objVal</span><span class="p">.</span><span class="nx">nodeName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">str</span> <span class="o">+=</span> <span class="nx">thick_pad</span> <span class="o">+</span> <span class="s1">&#39;[&#39;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;] =&gt;\n&#39;</span> <span class="o">+</span> <span class="nx">thick_pad</span> <span class="o">+</span> <span class="nx">_formatArray</span><span class="p">(</span><span class="nx">objVal</span><span class="p">,</span> <span class="nx">cur_depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">pad_val</span><span class="p">,</span> <span class="nx">pad_char</span><span class="p">);</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="nx">val</span> <span class="o">=</span> <span class="nx">_getInnerVal</span><span class="p">(</span><span class="nx">objVal</span><span class="p">,</span> <span class="nx">thick_pad</span><span class="p">);</span>
</span><span class='line'>                    <span class="nx">str</span> <span class="o">+=</span> <span class="nx">thick_pad</span> <span class="o">+</span> <span class="s1">&#39;[&#39;</span> <span class="o">+</span> <span class="nx">key</span> <span class="o">+</span> <span class="s1">&#39;] =&gt;\n&#39;</span> <span class="o">+</span> <span class="nx">thick_pad</span> <span class="o">+</span> <span class="nx">val</span> <span class="o">+</span> <span class="s1">&#39;\n&#39;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">str</span> <span class="o">+=</span> <span class="nx">base_pad</span> <span class="o">+</span> <span class="s1">&#39;}\n&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">str</span> <span class="o">=</span> <span class="nx">_getInnerVal</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">thick_pad</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">str</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">output</span> <span class="o">=</span> <span class="nx">_formatArray</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">pad_val</span><span class="p">,</span> <span class="nx">pad_char</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">output</span> <span class="o">+=</span> <span class="s1">&#39;\n&#39;</span> <span class="o">+</span> <span class="nx">_formatArray</span><span class="p">(</span><span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">pad_val</span><span class="p">,</span> <span class="nx">pad_char</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">d</span> <span class="o">=</span> <span class="nx">XULDocument</span><span class="p">;</span> <span class="c1">// We&#39;re in XUL, so appending as plain text won&#39;t work</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">&#39;&lt;pre xmlns=&quot;http://www.w3.org/1999/xhtml&quot; style=&quot;white-space:pre;&quot;&gt;&#39;</span> <span class="o">+</span> <span class="nx">output</span> <span class="o">+</span> <span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">output</span><span class="p">);</span> <span class="c1">// Outputting as plain text may work in some plain XML</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/var/var_dump.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/var/var_dump.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript utf8_encode function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/utf8_encode"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/utf8_encode</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s utf8_encode</p>

<!-- more -->




<figure class='code'><figcaption><span>xml/utf8_encode.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/xml/utf8_encode.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">utf8_encode</span> <span class="p">(</span><span class="nx">argString</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Webtoolkit.info (http://www.webtoolkit.info/)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   improved by: sowberry</span>
</span><span class='line'>    <span class="c1">// +    tweaked by: Jack</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'>    <span class="c1">// +   improved by: Yves Sucaet</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Ulrich</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Rafal Kukawski</span>
</span><span class='line'>    <span class="c1">// +   improved by: kirilloid</span>
</span><span class='line'>    <span class="c1">// *     example 1: utf8_encode(&#39;Kevin van Zonneveld&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Kevin van Zonneveld&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">argString</span> <span class="o">===</span> <span class="kc">null</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">argString</span> <span class="o">===</span> <span class="s2">&quot;undefined&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="p">(</span><span class="nx">argString</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">);</span> <span class="c1">// .replace(/\r\n/g, &quot;\n&quot;).replace(/\r/g, &quot;\n&quot;);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">utftext</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">,</span> <span class="nx">stringl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">start</span> <span class="o">=</span> <span class="nx">end</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">stringl</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">n</span> <span class="o">&lt;</span> <span class="nx">stringl</span><span class="p">;</span> <span class="nx">n</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">c1</span> <span class="o">=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">enc</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">c1</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">end</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">c1</span> <span class="o">&gt;</span> <span class="mi">127</span> <span class="o">&amp;&amp;</span> <span class="nx">c1</span> <span class="o">&lt;</span> <span class="mi">2048</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">enc</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">((</span><span class="nx">c1</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">|</span> <span class="mi">192</span><span class="p">,</span> <span class="p">(</span><span class="nx">c1</span> <span class="o">&amp;</span> <span class="mi">63</span><span class="p">)</span> <span class="o">|</span> <span class="mi">128</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">enc</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">((</span><span class="nx">c1</span> <span class="o">&gt;&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">|</span> <span class="mi">224</span><span class="p">,</span> <span class="p">((</span><span class="nx">c1</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">63</span><span class="p">)</span> <span class="o">|</span> <span class="mi">128</span><span class="p">,</span> <span class="p">(</span><span class="nx">c1</span> <span class="o">&amp;</span> <span class="mi">63</span><span class="p">)</span> <span class="o">|</span> <span class="mi">128</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">enc</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">end</span> <span class="o">&gt;</span> <span class="nx">start</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">utftext</span> <span class="o">+=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">utftext</span> <span class="o">+=</span> <span class="nx">enc</span><span class="p">;</span>
</span><span class='line'>            <span class="nx">start</span> <span class="o">=</span> <span class="nx">end</span> <span class="o">=</span> <span class="nx">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">end</span> <span class="o">&gt;</span> <span class="nx">start</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">utftext</span> <span class="o">+=</span> <span class="nx">string</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">stringl</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">utftext</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/xml/utf8_encode.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/xml/utf8_encode.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript utf8_decode function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/utf8_decode"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/utf8_decode</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s utf8_decode</p>

<!-- more -->




<figure class='code'><figcaption><span>xml/utf8_decode.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/xml/utf8_decode.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">utf8_decode</span> <span class="p">(</span><span class="nx">str_data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Webtoolkit.info (http://www.webtoolkit.info/)</span>
</span><span class='line'>    <span class="c1">// +      input by: Aman Gupta</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Norman &quot;zEh&quot; Fuchs</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: hitwork</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'>    <span class="c1">// +      input by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// *     example 1: utf8_decode(&#39;Kevin van Zonneveld&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Kevin van Zonneveld&#39;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tmp_arr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">ac</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">c1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">c2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">c3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">str_data</span> <span class="o">+=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">str_data</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">c1</span> <span class="o">=</span> <span class="nx">str_data</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">c1</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">ac</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">c1</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">c1</span> <span class="o">&gt;</span> <span class="mi">191</span> <span class="o">&amp;&amp;</span> <span class="nx">c1</span> <span class="o">&lt;</span> <span class="mi">224</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">c2</span> <span class="o">=</span> <span class="nx">str_data</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">ac</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(((</span><span class="nx">c1</span> <span class="o">&amp;</span> <span class="mi">31</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="nx">c2</span> <span class="o">&amp;</span> <span class="mi">63</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">c2</span> <span class="o">=</span> <span class="nx">str_data</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">c3</span> <span class="o">=</span> <span class="nx">str_data</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">ac</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(((</span><span class="nx">c1</span> <span class="o">&amp;</span> <span class="mi">15</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="nx">c2</span> <span class="o">&amp;</span> <span class="mi">63</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">6</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="nx">c3</span> <span class="o">&amp;</span> <span class="mi">63</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">i</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">tmp_arr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/xml/utf8_decode.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/xml/utf8_decode.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript usort function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/usort"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/usort</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s usort</p>

<!-- more -->




<figure class='code'><figcaption><span>array/usort.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/usort.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">usort</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">,</span> <span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// %        note 1: This function deviates from PHP in returning a copy of the array instead</span>
</span><span class='line'>    <span class="c1">// %        note 1: of acting by reference and returning true; this was necessary because</span>
</span><span class='line'>    <span class="c1">// %        note 1: IE does not allow deleting and re-adding of properties without caching</span>
</span><span class='line'>    <span class="c1">// %        note 1: of property position; you can set the ini of &quot;phpjs.strictForIn&quot; to true to</span>
</span><span class='line'>    <span class="c1">// %        note 1: get the PHP behavior, but use this only if you are in an environment</span>
</span><span class='line'>    <span class="c1">// %        note 1: such as Firefox extensions where for-in iteration order is fixed and true</span>
</span><span class='line'>    <span class="c1">// %        note 1: property deletion is supported. Note that we intend to implement the PHP</span>
</span><span class='line'>    <span class="c1">// %        note 1: behavior by default if IE ever does allow it; only gives shallow copy since</span>
</span><span class='line'>    <span class="c1">// %        note 1: is by reference in PHP anyways</span>
</span><span class='line'>    <span class="c1">// *     example 1: stuff = {d: &#39;3&#39;, a: &#39;1&#39;, b: &#39;11&#39;, c: &#39;4&#39;};</span>
</span><span class='line'>    <span class="c1">// *     example 1: stuff = usort(stuff, function (a, b) {return(a-b);});</span>
</span><span class='line'>    <span class="c1">// *     results 1: stuff = {0: &#39;1&#39;, 1: &#39;3&#39;, 2: &#39;4&#39;, 3: &#39;11&#39;};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">valArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">strictForIn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">populateArr</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">sorter</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">sorter</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">// END REDUNDANT</span>
</span><span class='line'>    <span class="nx">strictForIn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">!==</span> <span class="s1">&#39;off&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">populateArr</span> <span class="o">=</span> <span class="nx">strictForIn</span> <span class="o">?</span> <span class="nx">inputArr</span> <span class="o">:</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">inputArr</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Get key and value arrays</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">valArr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">strictForIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">delete</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">valArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">sorter</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">valArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Repopulate the old array</span>
</span><span class='line'>        <span class="nx">populateArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">valArr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">strictForIn</span> <span class="o">||</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/usort.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/usort.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript user_error function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/user_error"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/user_error</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s user_error</p>

<!-- more -->




<figure class='code'><figcaption><span>errorfunc/user_error.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/errorfunc/user_error.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">user_error</span> <span class="p">(</span><span class="nx">error_msg</span><span class="p">,</span> <span class="nx">error_type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// -    depends on: trigger_error</span>
</span><span class='line'>    <span class="c1">// *     example 1: user_error(&#39;Cannot divide by zero&#39;, 256);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: true</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">trigger_error</span><span class="p">(</span><span class="nx">error_msg</span><span class="p">,</span> <span class="nx">error_type</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/errorfunc/user_error.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/errorfunc/user_error.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript urlencode function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/urlencode"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/urlencode</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s urlencode</p>

<!-- more -->




<figure class='code'><figcaption><span>url/urlencode.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/url/urlencode.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">urlencode</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Philip Peterson</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +      input by: AJ</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +      input by: travc</span>
</span><span class='line'>    <span class="c1">// +      input by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Lars Fischer</span>
</span><span class='line'>    <span class="c1">// +      input by: Ratheous</span>
</span><span class='line'>    <span class="c1">// +      reimplemented by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Joris</span>
</span><span class='line'>    <span class="c1">// +      reimplemented by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// %          note 1: This reflects PHP 5.3/6.0+ behavior</span>
</span><span class='line'>    <span class="c1">// %        note 2: Please be aware that this function expects to encode into UTF-8 encoded strings, as found on</span>
</span><span class='line'>    <span class="c1">// %        note 2: pages served as UTF-8</span>
</span><span class='line'>    <span class="c1">// *     example 1: urlencode(&#39;Kevin van Zonneveld!&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Kevin+van+Zonneveld%21&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 2: urlencode(&#39;http://kevin.vanzonneveld.net/&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 2: &#39;http%3A%2F%2Fkevin.vanzonneveld.net%2F&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 3: urlencode(&#39;http://www.google.nl/search?q=php.js&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=com.ubuntu:en-US:unofficial&amp;client=firefox-a&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 3: &#39;http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a&#39;</span>
</span><span class='line'>    <span class="nx">str</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current</span>
</span><span class='line'>    <span class="c1">// PHP behavior, you would need to add &quot;.replace(/~/g, &#39;%7E&#39;);&quot; to the following.</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/!/g</span><span class="p">,</span> <span class="s1">&#39;%21&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&#39;/g</span><span class="p">,</span> <span class="s1">&#39;%27&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\(/g</span><span class="p">,</span> <span class="s1">&#39;%28&#39;</span><span class="p">).</span>
</span><span class='line'>    <span class="nx">replace</span><span class="p">(</span><span class="sr">/\)/g</span><span class="p">,</span> <span class="s1">&#39;%29&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\*/g</span><span class="p">,</span> <span class="s1">&#39;%2A&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%20/g</span><span class="p">,</span> <span class="s1">&#39;+&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/url/urlencode.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/url/urlencode.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript urldecode function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/urldecode"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/urldecode</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s urldecode</p>

<!-- more -->




<figure class='code'><figcaption><span>url/urldecode.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/url/urldecode.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">urldecode</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Philip Peterson</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +      input by: AJ</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +      input by: travc</span>
</span><span class='line'>    <span class="c1">// +      input by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Lars Fischer</span>
</span><span class='line'>    <span class="c1">// +      input by: Ratheous</span>
</span><span class='line'>    <span class="c1">// +   improved by: Orlando</span>
</span><span class='line'>    <span class="c1">// +      reimplemented by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +      bugfixed by: Rob</span>
</span><span class='line'>    <span class="c1">// +      input by: e-mike</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// %        note 1: info on what encoding functions to use from: http://xkr.us/articles/javascript/encode-compare/</span>
</span><span class='line'>    <span class="c1">// %        note 2: Please be aware that this function expects to decode from UTF-8 encoded strings, as found on</span>
</span><span class='line'>    <span class="c1">// %        note 2: pages served as UTF-8</span>
</span><span class='line'>    <span class="c1">// *     example 1: urldecode(&#39;Kevin+van+Zonneveld%21&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Kevin van Zonneveld!&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 2: urldecode(&#39;http%3A%2F%2Fkevin.vanzonneveld.net%2F&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 2: &#39;http://kevin.vanzonneveld.net/&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 3: urldecode(&#39;http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 3: &#39;http://www.google.nl/search?q=php.js&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=com.ubuntu:en-US:unofficial&amp;client=firefox-a&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">decodeURIComponent</span><span class="p">((</span><span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\+/g</span><span class="p">,</span> <span class="s1">&#39;%20&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/url/urldecode.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/url/urldecode.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript unserialize function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/unserialize"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/unserialize</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s unserialize</p>

<!-- more -->




<figure class='code'><figcaption><span>var/unserialize.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/var/unserialize.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">unserialize</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +     original by: Arpad Ray (mailto:arpad@php.net)</span>
</span><span class='line'>    <span class="c1">// +     improved by: Pedro Tainha (http://www.pedrotainha.com)</span>
</span><span class='line'>    <span class="c1">// +     bugfixed by: dptr1988</span>
</span><span class='line'>    <span class="c1">// +      revised by: d3x</span>
</span><span class='line'>    <span class="c1">// +     improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +        input by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +     improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +     improved by: Chris</span>
</span><span class='line'>    <span class="c1">// +     improved by: James</span>
</span><span class='line'>    <span class="c1">// +        input by: Martin (http://www.erlenwiese.de/)</span>
</span><span class='line'>    <span class="c1">// +     bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +     improved by: Le Torbi</span>
</span><span class='line'>    <span class="c1">// +     input by: kilops</span>
</span><span class='line'>    <span class="c1">// +     bugfixed by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// -      depends on: utf8_decode</span>
</span><span class='line'>    <span class="c1">// %            note: We feel the main purpose of this function should be to ease the transport of data between php &amp; js</span>
</span><span class='line'>    <span class="c1">// %            note: Aiming for PHP-compatibility, we have to translate objects to arrays</span>
</span><span class='line'>    <span class="c1">// *       example 1: unserialize(&#39;a:3:{i:0;s:5:&quot;Kevin&quot;;i:1;s:3:&quot;van&quot;;i:2;s:9:&quot;Zonneveld&quot;;}&#39;);</span>
</span><span class='line'>    <span class="c1">// *       returns 1: [&#39;Kevin&#39;, &#39;van&#39;, &#39;Zonneveld&#39;]</span>
</span><span class='line'>    <span class="c1">// *       example 2: unserialize(&#39;a:3:{s:9:&quot;firstName&quot;;s:5:&quot;Kevin&quot;;s:7:&quot;midName&quot;;s:3:&quot;van&quot;;s:7:&quot;surName&quot;;s:9:&quot;Zonneveld&quot;;}&#39;);</span>
</span><span class='line'>    <span class="c1">// *       returns 2: {firstName: &#39;Kevin&#39;, midName: &#39;van&#39;, surName: &#39;Zonneveld&#39;}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">utf8Overhead</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">chr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// http://phpjs.org/functions/unserialize:571#comment_95906</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">chr</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">code</span> <span class="o">&lt;</span> <span class="mh">0x0080</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">code</span> <span class="o">&lt;</span> <span class="mh">0x0800</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">error</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">filename</span><span class="p">,</span> <span class="nx">line</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">that</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">type</span><span class="p">](</span><span class="nx">msg</span><span class="p">,</span> <span class="nx">filename</span><span class="p">,</span> <span class="nx">line</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">read_until</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">stopchr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">buf</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">chr</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">offset</span><span class="p">,</span> <span class="nx">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="nx">chr</span> <span class="o">!=</span> <span class="nx">stopchr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">((</span><span class="nx">i</span> <span class="o">+</span> <span class="nx">offset</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Error&#39;</span><span class="p">,</span> <span class="s1">&#39;Invalid&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">chr</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">chr</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">offset</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">offset</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nx">buf</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">buf</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">read_chrs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">buf</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">buf</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">chr</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">offset</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="nx">offset</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">buf</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">chr</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">length</span> <span class="o">-=</span> <span class="nx">utf8Overhead</span><span class="p">(</span><span class="nx">chr</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nx">buf</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">buf</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">_unserialize</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">readdata</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">readData</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">chrs</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">ccount</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">stringlength</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">keyandchrs</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">keys</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">offset</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dtype</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">offset</span><span class="p">,</span> <span class="nx">offset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">dataoffset</span> <span class="o">=</span> <span class="nx">offset</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">typeconvert</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nx">dtype</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;i&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">typeconvert</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="nx">readData</span> <span class="o">=</span> <span class="nx">read_until</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span><span class="p">,</span> <span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">chrs</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">readdata</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">chrs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;b&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">typeconvert</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">!==</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="nx">readData</span> <span class="o">=</span> <span class="nx">read_until</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span><span class="p">,</span> <span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">chrs</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">readdata</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">chrs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;d&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">typeconvert</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="nx">readData</span> <span class="o">=</span> <span class="nx">read_until</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span><span class="p">,</span> <span class="s1">&#39;;&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">chrs</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">readdata</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">chrs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;n&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">readdata</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;s&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">ccount</span> <span class="o">=</span> <span class="nx">read_until</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">chrs</span> <span class="o">=</span> <span class="nx">ccount</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">stringlength</span> <span class="o">=</span> <span class="nx">ccount</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">chrs</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">readData</span> <span class="o">=</span> <span class="nx">read_chrs</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">stringlength</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">chrs</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">readdata</span> <span class="o">=</span> <span class="nx">readData</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">chrs</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">chrs</span> <span class="o">!=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">stringlength</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">chrs</span> <span class="o">!=</span> <span class="nx">readdata</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">error</span><span class="p">(</span><span class="s1">&#39;SyntaxError&#39;</span><span class="p">,</span> <span class="s1">&#39;String length mismatch&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Length was calculated on an utf-8 encoded string</span>
</span><span class='line'>            <span class="c1">// so wait with decoding</span>
</span><span class='line'>            <span class="nx">readdata</span> <span class="o">=</span> <span class="nx">that</span><span class="p">.</span><span class="nx">utf8_decode</span><span class="p">(</span><span class="nx">readdata</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="s1">&#39;a&#39;</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">readdata</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">keyandchrs</span> <span class="o">=</span> <span class="nx">read_until</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">chrs</span> <span class="o">=</span> <span class="nx">keyandchrs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">keys</span> <span class="o">=</span> <span class="nx">keyandchrs</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">chrs</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">keys</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">kprops</span> <span class="o">=</span> <span class="nx">_unserialize</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span><span class="p">);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">kchrs</span> <span class="o">=</span> <span class="nx">kprops</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">kprops</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>                <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">kchrs</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">vprops</span> <span class="o">=</span> <span class="nx">_unserialize</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">dataoffset</span><span class="p">);</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">vchrs</span> <span class="o">=</span> <span class="nx">vprops</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">vprops</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>                <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="nx">vchrs</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nx">readdata</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">dataoffset</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="nx">error</span><span class="p">(</span><span class="s1">&#39;SyntaxError&#39;</span><span class="p">,</span> <span class="s1">&#39;Unknown / Unhandled data type(s): &#39;</span> <span class="o">+</span> <span class="nx">dtype</span><span class="p">);</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="nx">dtype</span><span class="p">,</span> <span class="nx">dataoffset</span> <span class="o">-</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">typeconvert</span><span class="p">(</span><span class="nx">readdata</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">_unserialize</span><span class="p">((</span><span class="nx">data</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="mi">0</span><span class="p">)[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/var/unserialize.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/var/unserialize.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript uniqid function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/uniqid"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/uniqid</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s uniqid</p>

<!-- more -->




<figure class='code'><figcaption><span>misc/uniqid.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/misc/uniqid.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">uniqid</span> <span class="p">(</span><span class="nx">prefix</span><span class="p">,</span> <span class="nx">more_entropy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +    revised by: Kankrelune (http://www.webfaktory.info/)</span>
</span><span class='line'>    <span class="c1">// %        note 1: Uses an internal counter (in php_js global) to avoid collision</span>
</span><span class='line'>    <span class="c1">// *     example 1: uniqid();</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;a30285b160c14&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 2: uniqid(&#39;foo&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 2: &#39;fooa30285b1cd361&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 3: uniqid(&#39;bar&#39;, true);</span>
</span><span class='line'>    <span class="c1">// *     returns 3: &#39;bara20285b23dfd1.31879087&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">prefix</span> <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">prefix</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">retId</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">formatSeed</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">seed</span><span class="p">,</span> <span class="nx">reqWidth</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">seed</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">seed</span><span class="p">,</span> <span class="mi">10</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span> <span class="c1">// to hex str</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">reqWidth</span> <span class="o">&lt;</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// so long we split</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">seed</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">reqWidth</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">reqWidth</span> <span class="o">&gt;</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// so short we pad</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">Array</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nx">reqWidth</span> <span class="o">-</span> <span class="nx">seed</span><span class="p">.</span><span class="nx">length</span><span class="p">)).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">seed</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">seed</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// END REDUNDANT</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// init seed with big random int</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mh">0x75bcd15</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">retId</span> <span class="o">=</span> <span class="nx">prefix</span><span class="p">;</span> <span class="c1">// start with prefix, add current milliseconds hex string</span>
</span><span class='line'>    <span class="nx">retId</span> <span class="o">+=</span> <span class="nx">formatSeed</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">retId</span> <span class="o">+=</span> <span class="nx">formatSeed</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">uniqidSeed</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span> <span class="c1">// add seed hex string</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">more_entropy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// for more entropy we add a float lower to 10</span>
</span><span class='line'>        <span class="nx">retId</span> <span class="o">+=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">8</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">retId</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/misc/uniqid.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/misc/uniqid.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript uksort function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/uksort"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/uksort</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s uksort</p>

<!-- more -->




<figure class='code'><figcaption><span>array/uksort.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/uksort.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">uksort</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">,</span> <span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// %          note 1: The examples are correct, this is a new way</span>
</span><span class='line'>    <span class="c1">// %        note 2: This function deviates from PHP in returning a copy of the array instead</span>
</span><span class='line'>    <span class="c1">// %        note 2: of acting by reference and returning true; this was necessary because</span>
</span><span class='line'>    <span class="c1">// %        note 2: IE does not allow deleting and re-adding of properties without caching</span>
</span><span class='line'>    <span class="c1">// %        note 2: of property position; you can set the ini of &quot;phpjs.strictForIn&quot; to true to</span>
</span><span class='line'>    <span class="c1">// %        note 2: get the PHP behavior, but use this only if you are in an environment</span>
</span><span class='line'>    <span class="c1">// %        note 2: such as Firefox extensions where for-in iteration order is fixed and true</span>
</span><span class='line'>    <span class="c1">// %        note 2: property deletion is supported. Note that we intend to implement the PHP</span>
</span><span class='line'>    <span class="c1">// %        note 2: behavior by default if IE ever does allow it; only gives shallow copy since</span>
</span><span class='line'>    <span class="c1">// %        note 2: is by reference in PHP anyways</span>
</span><span class='line'>    <span class="c1">// *     example 1: data = {d: &#39;lemon&#39;, a: &#39;orange&#39;, b: &#39;banana&#39;, c: &#39;apple&#39;};</span>
</span><span class='line'>    <span class="c1">// *     example 1: data = uksort(data, function (key1, key2){ return (key1 == key2 ? 0 : (key1 &gt; key2 ? 1 : -1)); });</span>
</span><span class='line'>    <span class="c1">// *     results 1: data == {a: &#39;orange&#39;, b: &#39;banana&#39;, c: &#39;apple&#39;, d: &#39;lemon&#39;}</span>
</span><span class='line'>    <span class="c1">// *     returns 1: true</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">tmp_arr</span> <span class="o">=</span> <span class="p">{},</span>
</span><span class='line'>        <span class="nx">keys</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">strictForIn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">populateArr</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">sorter</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nb">window</span><span class="p">[</span><span class="nx">sorter</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make a list of key names</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">inputArr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Sort key names</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">keys</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">sorter</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">keys</span><span class="p">.</span><span class="nx">sort</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">// END REDUNDANT</span>
</span><span class='line'>    <span class="nx">strictForIn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">!==</span> <span class="s1">&#39;off&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">populateArr</span> <span class="o">=</span> <span class="nx">strictForIn</span> <span class="o">?</span> <span class="nx">inputArr</span> <span class="o">:</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Rebuild array with sorted key names</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">k</span> <span class="o">=</span> <span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">strictForIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">tmp_arr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">tmp_arr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">populateArr</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tmp_arr</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">strictForIn</span> <span class="o">||</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/uksort.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/uksort.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript ucwords function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/ucwords"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/ucwords</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s ucwords</p>

<!-- more -->




<figure class='code'><figcaption><span>strings/ucwords.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/ucwords.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">ucwords</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Waldo Malqui Silva</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'>    <span class="c1">// +   improved by: Robin</span>
</span><span class='line'>    <span class="c1">// +      input by: James (http://www.james-bell.co.uk/)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// *     example 1: ucwords(&#39;kevin van  zonneveld&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Kevin Van  Zonneveld&#39;</span>
</span><span class='line'>    <span class="c1">// *     example 2: ucwords(&#39;HELLO WORLD&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 2: &#39;HELLO WORLD&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^([a-z])|\s+([a-z])/g</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$1</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/ucwords.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/ucwords.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript ucfirst function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/ucfirst"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/ucfirst</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s ucfirst</p>

<!-- more -->




<figure class='code'><figcaption><span>strings/ucfirst.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/strings/ucfirst.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">ucfirst</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)</span>
</span><span class='line'>    <span class="c1">// +   bugfixed by: Onno Marsman</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// *     example 1: ucfirst(&#39;kevin van zonneveld&#39;);</span>
</span><span class='line'>    <span class="c1">// *     returns 1: &#39;Kevin van zonneveld&#39;</span>
</span><span class='line'>    <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nx">toUpperCase</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">f</span> <span class="o">+</span> <span class="nx">str</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/strings/ucfirst.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/strings/ucfirst.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript uasort function]]></title>
    <link href="http://kvz.github.com/phpjs/functions/uasort"/>
    <updated>2012-05-17T18:49:00+02:00</updated>
    <id>http://kvz.github.com/phpjs/functions/uasort</id>
    <content type="html"><![CDATA[<p>A JavaScript equivalent of PHP&#8217;s uasort</p>

<!-- more -->




<figure class='code'><figcaption><span>array/uasort.js </span><a href='https://raw.github.com/kvz/phpjs/master/functions/array/uasort.js'>raw on github </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">uasort</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">,</span> <span class="nx">sorter</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// http://kevin.vanzonneveld.net</span>
</span><span class='line'>    <span class="c1">// +   original by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Brett Zamir (http://brett-zamir.me)</span>
</span><span class='line'>    <span class="c1">// +   improved by: Theriault</span>
</span><span class='line'>    <span class="c1">// %        note 1: This function deviates from PHP in returning a copy of the array instead</span>
</span><span class='line'>    <span class="c1">// %        note 1: of acting by reference and returning true; this was necessary because</span>
</span><span class='line'>    <span class="c1">// %        note 1: IE does not allow deleting and re-adding of properties without caching</span>
</span><span class='line'>    <span class="c1">// %        note 1: of property position; you can set the ini of &quot;phpjs.strictForIn&quot; to true to</span>
</span><span class='line'>    <span class="c1">// %        note 1: get the PHP behavior, but use this only if you are in an environment</span>
</span><span class='line'>    <span class="c1">// %        note 1: such as Firefox extensions where for-in iteration order is fixed and true</span>
</span><span class='line'>    <span class="c1">// %        note 1: property deletion is supported. Note that we intend to implement the PHP</span>
</span><span class='line'>    <span class="c1">// %        note 1: behavior by default if IE ever does allow it; only gives shallow copy since</span>
</span><span class='line'>    <span class="c1">// %        note 1: is by reference in PHP anyways</span>
</span><span class='line'>    <span class="c1">// *     example 1: fruits = {d: &#39;lemon&#39;, a: &#39;orange&#39;, b: &#39;banana&#39;, c: &#39;apple&#39;};</span>
</span><span class='line'>    <span class="c1">// *     example 1: fruits = uasort(fruits, function (a, b) { if (a &gt; b) {return 1;}if (a &lt; b) {return -1;} return 0;});</span>
</span><span class='line'>    <span class="c1">// *     results 1: fruits == {c: &#39;apple&#39;, b: &#39;banana&#39;, d: &#39;lemon&#39;, a: &#39;orange&#39;}</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">valArr</span> <span class="o">=</span> <span class="p">[],</span>
</span><span class='line'>        <span class="nx">tempKeyVal</span><span class="p">,</span> <span class="nx">tempValue</span><span class="p">,</span> <span class="nx">ret</span><span class="p">,</span> <span class="nx">k</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">strictForIn</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">populateArr</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">sorter</span> <span class="o">===</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">sorter</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;[object Array]&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">sorter</span> <span class="o">=</span> <span class="k">this</span><span class="p">[</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">sorter</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// BEGIN REDUNDANT</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>    <span class="c1">// END REDUNDANT</span>
</span><span class='line'>    <span class="nx">strictForIn</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">php_js</span><span class="p">.</span><span class="nx">ini</span><span class="p">[</span><span class="s1">&#39;phpjs.strictForIn&#39;</span><span class="p">].</span><span class="nx">local_value</span> <span class="o">!==</span> <span class="s1">&#39;off&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">populateArr</span> <span class="o">=</span> <span class="nx">strictForIn</span> <span class="o">?</span> <span class="nx">inputArr</span> <span class="o">:</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">k</span> <span class="k">in</span> <span class="nx">inputArr</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Get key and value arrays</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">inputArr</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">k</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">valArr</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">k</span><span class="p">,</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">]]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">strictForIn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">delete</span> <span class="nx">inputArr</span><span class="p">[</span><span class="nx">k</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">valArr</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">sorter</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">valArr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Repopulate the old array</span>
</span><span class='line'>        <span class="nx">populateArr</span><span class="p">[</span><span class="nx">valArr</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">valArr</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">strictForIn</span> <span class="o">||</span> <span class="nx">populateArr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<ul>
 <li><a href="https://github.com/kvz/phpjs/blob/master/functions/array/uasort.js">view on github</a></li>
 <li><a href="https://github.com/kvz/phpjs/edit/master/functions/array/uasort.js">edit on github</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
